#!/bin/bash

# ===============================================================================
# PDF CONVERTER PIPELINE v2.0 - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–ï–†–ï–í–û–î–ß–ò–ö –î–û–ö–£–ú–ï–ù–¢–û–í
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç—ã
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è+–ø–µ—Ä–µ–≤–æ–¥, –ø–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤—ã—Ö MD —Ñ–∞–π–ª–æ–≤
# ===============================================================================

set -euo pipefail

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/.env"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
fi

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
AIRFLOW_URL="${AIRFLOW_BASE_URL_HOST:-http://localhost:8090}"
AIRFLOW_USERNAME="${AIRFLOW_USERNAME:-admin}"
AIRFLOW_PASSWORD="${AIRFLOW_PASSWORD:-admin}"

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–∞–ø–∫–∏
HOST_INPUT_DIR="${SCRIPT_DIR}/input"
HOST_OUTPUT_ZH_DIR="${SCRIPT_DIR}/output/zh"
HOST_OUTPUT_RU_DIR="${SCRIPT_DIR}/output/ru"
HOST_OUTPUT_EN_DIR="${SCRIPT_DIR}/output/en"
LOGS_DIR="${SCRIPT_DIR}/logs"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
mkdir -p "$HOST_INPUT_DIR" "$HOST_OUTPUT_ZH_DIR" "$HOST_OUTPUT_RU_DIR" "$HOST_OUTPUT_EN_DIR" "$LOGS_DIR"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_FILE=""

start_new_log() {
    local prefix="$1"
    LOG_FILE="${LOGS_DIR}/${prefix}_$(date +%Y%m%d_%H%M%S)_$$.log"
    touch "$LOG_FILE"
}

log_file_path() {
    if [ -z "$LOG_FILE" ]; then
        start_new_log "session"
    fi
    echo "$LOG_FILE"
}

prepare_logging() {
    local prefix="$1"
    start_new_log "$prefix"
    log "INFO" "–ó–∞–ø–∏—Å—å –ª–æ–≥–∞: $(log_file_path)"
}

# =============================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp
    timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${BLUE}[$timestamp]${NC} ${YELLOW}[$level]${NC} $message" | tee -a "$(log_file_path)"
}

show_header() {
    echo -e "${CYAN}"
    echo "==============================================================================="
    echo " PDF CONVERTER PIPELINE v2.0 - –ï–î–ò–ù–´–ô –ö–û–ù–í–ï–†–¢–ï–† –ò –ü–ï–†–ï–í–û–î–ß–ò–ö"
    echo "==============================================================================="
    echo -e "${NC}"
    echo "üåê –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä PDF"
    echo "üß≠ –†–µ–∂–∏–º—ã: –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤—ã—Ö Markdown"
    echo "üìÇ –í—Ö–æ–¥–Ω—ã–µ PDF: $HOST_INPUT_DIR"
    echo "üìÇ –ò—Å—Ö–æ–¥–Ω—ã–µ MD (ZH): $HOST_OUTPUT_ZH_DIR"
    echo "üìÅ –†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥: $HOST_OUTPUT_RU_DIR"
    echo "üìÅ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥: $HOST_OUTPUT_EN_DIR"
    echo "üìã –õ–æ–≥–∏: $LOGS_DIR"
    echo ""
}

show_menu() {
    echo -e "${MAGENTA}=== –í–´–ë–ï–†–ò–¢–ï –°–¶–ï–ù–ê–†–ò–ô –†–ê–ë–û–¢–´ ===${NC}"
    echo ""
    echo -e "${GREEN}1.${NC} ${BLUE}–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –†—É—Å—Å–∫–∏–π${NC}"
    echo "   (–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ MD + –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π)"
    echo ""
    echo -e "${GREEN}2.${NC} ${BLUE}–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π${NC}"
    echo "   (–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ MD + –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)"
    echo ""
    echo -e "${GREEN}3.${NC} ${BLUE}–ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤–æ–≥–æ MD ‚Üí –†—É—Å—Å–∫–∏–π${NC}"
    echo "   (–ü–µ—Ä–µ–≤–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö MD —Ñ–∞–π–ª–æ–≤ –∏–∑ $HOST_OUTPUT_ZH_DIR)"
    echo ""
    echo -e "${GREEN}4.${NC} ${BLUE}–ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤–æ–≥–æ MD ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π${NC}"
    echo "   (–ü–µ—Ä–µ–≤–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö MD —Ñ–∞–π–ª–æ–≤ –∏–∑ $HOST_OUTPUT_ZH_DIR)"
    echo ""
    echo -e "${GREEN}5.${NC} ${BLUE}–¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF ‚Üí MD${NC}"
    echo "   (–ü–æ–ª–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π, –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞, –≤—ã—Ö–æ–¥ –≤ $HOST_OUTPUT_ZH_DIR)"
    echo ""
    echo -e "${RED}0.${NC} ${YELLOW}–í—ã—Ö–æ–¥${NC}"
    echo ""
    echo -n -e "${CYAN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-5): ${NC}"
}

check_dependencies() {
    log "INFO" "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."

    if ! command -v jq &> /dev/null; then
        log "ERROR" "‚ùå jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install jq"
        return 1
    fi
    log "INFO" "‚úÖ jq —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    if ! command -v curl &> /dev/null; then
        log "ERROR" "‚ùå curl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt-get install curl"
        return 1
    fi
    log "INFO" "‚úÖ curl —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    return 0
}

check_services() {
    log "INFO" "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    local services=(
        "$AIRFLOW_URL/health:Airflow UI"
    )

    for service_info in "${services[@]}"; do
        local url="${service_info%:*}"
        local name="${service_info#*:}"
        if curl -s --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" "$url" > /dev/null 2>&1; then
            log "INFO" "‚úÖ $name –≥–æ—Ç–æ–≤"
        else
            local base="${url%/health}"
            local v2="${base}/api/v2/monitor/health"
            if ! curl -s --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" "$v2" > /dev/null 2>&1; then
                log "ERROR" "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ $url"
                return 1
            fi
            log "INFO" "‚úÖ $name –≥–æ—Ç–æ–≤ (—á–µ—Ä–µ–∑ API v2)"
        fi
    done

    log "INFO" "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã"
    return 0
}

# –°—Ü–µ–Ω–∞—Ä–∏–π 1 –∏ 2: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
full_pdf_processing() {
    local target_language="$1"
    local lang_name="$2"
    local output_dir="$3"

    log "INFO" "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF ‚Üí $lang_name"

    # –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤
    local pdf_files=()
    while IFS= read -r -d '' file; do
        pdf_files+=("$file")
    done < <(find "$HOST_INPUT_DIR" -name "*.pdf" -type f -print0)

    local total_files=${#pdf_files[@]}

    if [ $total_files -eq 0 ]; then
        log "WARN" "üìÇ –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ $HOST_INPUT_DIR"
        echo "–ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É $HOST_INPUT_DIR –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞"
        return 0
    fi

    log "INFO" "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: $total_files"
    echo ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    local processed=0
    local failed=0
    local start_time
    start_time=$(date +%s)

    for pdf_file in "${pdf_files[@]}"; do
        local filename
        filename=$(basename "$pdf_file")
        echo -e "${BLUE}[–§–ê–ô–õ $((processed + failed + 1))/$total_files]${NC} $filename ‚Üí $lang_name"

        if process_pdf_with_translation "$pdf_file" "$target_language" "$output_dir"; then
            ((processed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–í–ï–î–ï–ù${NC}"
        else
            ((failed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò${NC}"
        fi
        echo ""
    done

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local end_time
    end_time=$(date +%s)
    local total_duration=$((end_time - start_time))

    show_processing_results "$processed" "$failed" "$total_duration" "$lang_name" "$output_dir"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
process_pdf_with_translation() {
    local pdf_file="$1"
    local target_language="$2"
    local output_dir="$3"
    local filename
    filename=$(basename "$pdf_file")
    local timestamp
    timestamp=$(date +%s)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º —á–µ—Ä–µ–∑ orchestrator (—á–µ—Ä–µ–∑ jq)
    local config_json
    config_json=$(jq -n \
        --arg input_file "$pdf_file" \
        --arg filename "$filename" \
        --argjson timestamp $timestamp \
        --arg target_language "$target_language" \
        --arg quality_level "high" \
        --argjson enable_ocr true \
        --argjson preserve_structure true \
        --argjson extract_tables true \
        --argjson extract_images true \
        --arg stage_mode "full_with_translation" \
        --argjson processing_stages 4 \
        --argjson validation_enabled true \
        --argjson quality_target 95.0 \
        --arg language "zh-CN" \
        --argjson chinese_optimization true \
        --arg pipeline_version "4.0" \
        --arg processing_mode "digital_pdf" \
        --argjson use_orchestrator true \
        --argjson preserve_technical_terms true \
        '{
            input_file: $input_file,
            filename: $filename,
            timestamp: $timestamp,
            target_language: $target_language,
            quality_level: $quality_level,
            enable_ocr: $enable_ocr,
            preserve_structure: $preserve_structure,
            extract_tables: $extract_tables,
            extract_images: $extract_images,
            stage_mode: $stage_mode,
            processing_stages: $processing_stages,
            validation_enabled: $validation_enabled,
            quality_target: $quality_target,
            language: $language,
            chinese_optimization: $chinese_optimization,
            pipeline_version: $pipeline_version,
            processing_mode: $processing_mode,
            use_orchestrator: $use_orchestrator,
            preserve_technical_terms: $preserve_technical_terms
        }')

    local request_body
    request_body=$(jq -n --argjson conf "$config_json" '{conf: $conf}')

    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ orchestrator
    local response
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
        -H "Content-Type: application/json" \
        -d "$request_body" \
        "$AIRFLOW_URL/api/v1/dags/orchestrator_dag/dagRuns")

    local http_code
    http_code=$(echo "$response" | tail -n1)
    local body
    body=$(echo "$response" | head -n -1)

    if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
        local dag_run_id
        dag_run_id=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('dag_run_id', 'unknown'))" 2>/dev/null || echo "unknown")
        log "INFO" "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. Run ID: $dag_run_id"

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        wait_for_translation_completion "$dag_run_id" "$filename" "$target_language"
        return $?
    else
        if [ -n "$body" ]; then
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: HTTP $http_code ‚Äî $(echo "$body" | tr '\n' ' ')"
        else
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: HTTP $http_code"
        fi
        return 1
    fi
}

# –°—Ü–µ–Ω–∞—Ä–∏–π 3 –∏ 4: –ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤—ã—Ö MD —Ñ–∞–π–ª–æ–≤
translate_existing_md() {
    local target_language="$1"
    local lang_name="$2"
    local output_dir="$3"

    log "INFO" "üîÑ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ç–æ–≤—ã—Ö MD —Ñ–∞–π–ª–æ–≤ ‚Üí $lang_name"

    # –ü–æ–∏—Å–∫ MD —Ñ–∞–π–ª–æ–≤
    local md_files=()
    while IFS= read -r -d '' file; do
        md_files+=("$file")
    done < <(find "$HOST_OUTPUT_ZH_DIR" -name "*.md" -type f -print0)

    local total_files=${#md_files[@]}

    if [ $total_files -eq 0 ]; then
        log "WARN" "üìÇ –ù–µ—Ç MD —Ñ–∞–π–ª–æ–≤ –≤ $HOST_OUTPUT_ZH_DIR"
        echo "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PDF –∏–ª–∏ –ø–æ–º–µ—Å—Ç–∏—Ç–µ MD —Ñ–∞–π–ª—ã –≤ $HOST_OUTPUT_ZH_DIR"
        return 0
    fi

    log "INFO" "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: $total_files"
    echo ""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    local processed=0
    local failed=0
    local start_time
    start_time=$(date +%s)

    for md_file in "${md_files[@]}"; do
        local filename
        filename=$(basename "$md_file")
        echo -e "${BLUE}[–§–ê–ô–õ $((processed + failed + 1))/$total_files]${NC} $filename ‚Üí $lang_name"

        if translate_single_md "$md_file" "$target_language" "$output_dir"; then
            ((processed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –£–°–ü–ï–®–ù–û –ü–ï–†–ï–í–ï–î–ï–ù${NC}"
        else
            ((failed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê –ü–ï–†–ï–í–û–î–ê${NC}"
        fi
        echo ""
    done

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local end_time
    end_time=$(date +%s)
    local total_duration=$((end_time - start_time))

    show_processing_results "$processed" "$failed" "$total_duration" "$lang_name" "$output_dir"
}

# –ü–µ—Ä–µ–≤–æ–¥ –æ–¥–Ω–æ–≥–æ MD —Ñ–∞–π–ª–∞
translate_single_md() {
    local md_file="$1"
    local target_language="$2"
    local output_dir="$3"
    local filename
    filename=$(basename "$md_file")
    local timestamp
    timestamp=$(date +%s)

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≥–æ—Ç–æ–≤–æ–≥–æ MD
    local config_json
    config_json=$(jq -n \
        --arg markdown_file "$md_file" \
        --arg filename "$filename" \
        --argjson timestamp $timestamp \
        --arg target_language "$target_language" \
        --arg stage_mode "translation_only" \
        --argjson preserve_technical_terms true \
        --argjson chinese_source true \
        --arg translation_method "builtin_dictionary_v3" \
        --argjson use_orchestrator false \
        --argjson stage3_only true \
        '{
            markdown_file: $markdown_file,
            filename: $filename,
            timestamp: $timestamp,
            target_language: $target_language,
            stage_mode: $stage_mode,
            preserve_technical_terms: $preserve_technical_terms,
            chinese_source: $chinese_source,
            translation_method: $translation_method,
            use_orchestrator: $use_orchestrator,
            stage3_only: $stage3_only
        }')

    local request_body
    request_body=$(jq -n --argjson conf "$config_json" '{conf: $conf}')

    # –ó–∞–ø—É—Å–∫ translation_pipeline –Ω–∞–ø—Ä—è–º—É—é
    local response
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
        -H "Content-Type: application/json" \
        -d "$request_body" \
        "$AIRFLOW_URL/api/v1/dags/translation_pipeline/dagRuns")

    local http_code
    http_code=$(echo "$response" | tail -n1)
    local body
    body=$(echo "$response" | head -n -1)

    if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
        local dag_run_id
        dag_run_id=$(echo "$body" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('dag_run_id', 'unknown'))" 2>/dev/null || echo "unknown")
        log "INFO" "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–ø—É—â–µ–Ω. Run ID: $dag_run_id"

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        wait_for_translation_completion "$dag_run_id" "$filename" "$target_language"
        return $?
    else
        if [ -n "$body" ]; then
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: HTTP $http_code ‚Äî $(echo "$body" | tr '\n' ' ')"
        else
            log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: HTTP $http_code"
        fi
        return 1
    fi
}

# –°—Ü–µ–Ω–∞—Ä–∏–π 5: –¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è

trigger_full_conversion() {
    local pdf_file="$1"
    local filename
    filename=$(basename "$pdf_file")
    local timestamp
    timestamp=$(date +%s)

    log "INFO" "üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: $filename"

    local config_json
    config_json=$(jq -n \
        --arg input_file "$pdf_file" \
        --arg filename "$filename" \
        --argjson timestamp $timestamp \
        --arg target_language "original" \
        --arg quality_level "high" \
        --argjson enable_ocr true \
        --argjson preserve_structure true \
        --argjson extract_tables true \
        --argjson extract_images true \
        --arg stage_mode "full_conversion_with_validation" \
        --argjson processing_stages 4 \
        --argjson validation_enabled true \
        --argjson quality_target 100.0 \
        --arg language "zh-CN" \
        --argjson chinese_optimization true \
        --arg pipeline_version "4.0" \
        --arg processing_mode "digital_pdf" \
        --argjson use_orchestrator true \
        '{
            input_file: $input_file,
            filename: $filename,
            timestamp: $timestamp,
            target_language: $target_language,
            quality_level: $quality_level,
            enable_ocr: $enable_ocr,
            preserve_structure: $preserve_structure,
            extract_tables: $extract_tables,
            extract_images: $extract_images,
            stage_mode: $stage_mode,
            processing_stages: $processing_stages,
            validation_enabled: $validation_enabled,
            quality_target: $quality_target,
            language: $language,
            chinese_optimization: $chinese_optimization,
            pipeline_version: $pipeline_version,
            processing_mode: $processing_mode,
            use_orchestrator: $use_orchestrator
        }')

    local request_body
    request_body=$(jq -n --argjson conf "$config_json" '{conf: $conf}')

    log "INFO" "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Airflow..."

    local response
    response=$(curl -s -w "\n%{http_code}" \
        -X POST \
        --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
        -H "Content-Type: application/json" \
        -d "$request_body" \
        "$AIRFLOW_URL/api/v1/dags/orchestrator_dag/dagRuns")

    local http_code
    http_code=$(echo "$response" | tail -n1)
    local body
    body=$(echo "$response" | head -n -1)

    if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
        local dag_run_id
        dag_run_id=$(echo "$body" | jq -r '.dag_run_id // "unknown"' 2>/dev/null || echo "unknown")
        log "INFO" "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞. Run ID: $dag_run_id"

        wait_for_conversion_completion "$dag_run_id" "$filename"
        return 0
    else
        log "ERROR" "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: HTTP $http_code"
        if [ -n "$body" ]; then
            log "ERROR" "–û—Ç–≤–µ—Ç: $body"
        fi

        if [[ "$body" == *"not valid JSON"* ]]; then
            log "ERROR" "üîß –ü—Ä–æ–±–ª–µ–º–∞ —Å JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É jq"
        elif [[ "$body" == *"orchestrator_dag"* ]]; then
            log "ERROR" "üîß orchestrator_dag –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ DAG –≤ Airflow UI"
        fi

        return 1
    fi
}

wait_for_conversion_completion() {
    local dag_run_id="$1"
    local filename="$2"
    local timeout=3600
    local start_time
    start_time=$(date +%s)

    log "INFO" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (—Ç–∞–π–º–∞—É—Ç: ${timeout}s)..."

    while true; do
        local current_time
        current_time=$(date +%s)
        local elapsed=$((current_time - start_time))

        if [ $elapsed -gt $timeout ]; then
            log "ERROR" "‚ùå –¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
            return 1
        fi

        local response
        response=$(curl -s \
            --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
            "$AIRFLOW_URL/api/v1/dags/orchestrator_dag/dagRuns/$dag_run_id")

        local state
        state=$(echo "$response" | jq -r '.state // "unknown"' 2>/dev/null || echo "error")

        case "$state" in
            "success")
                log "INFO" "‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                show_conversion_results "$filename"
                return 0
                ;;
            "failed"|"upstream_failed")
                log "ERROR" "‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π"
                log "ERROR" "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ Airflow UI: $AIRFLOW_URL/dags/orchestrator_dag/grid?dag_run_id=$dag_run_id"
                return 1
                ;;
            "running")
                local progress_msg="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (${elapsed}s)"
                printf "\r${YELLOW}[–ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø]${NC} $progress_msg "
                sleep 10
                ;;
            *)
                sleep 5
                ;;
        esac
    done
}

show_conversion_results() {
    local filename="$1"

    log "INFO" "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:"

    local latest_file
    latest_file=$(find "$HOST_OUTPUT_ZH_DIR" -name "*.md" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2- 2>/dev/null || echo "")

    if [ -n "$latest_file" ] && [ -f "$latest_file" ]; then
        log "INFO" "üìÅ –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª: $latest_file"
        local file_size
        file_size=$(wc -c < "$latest_file" 2>/dev/null || echo "0")
        log "INFO" "üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $file_size –±–∞–π—Ç"

        local lines words
        lines=$(wc -l < "$latest_file" 2>/dev/null || echo "0")
        words=$(wc -w < "$latest_file" 2>/dev/null || echo "0")

        log "INFO" "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
        log "INFO" "  - –°—Ç—Ä–æ–∫: $lines"
        log "INFO" "  - –°–ª–æ–≤: $words"
        log "INFO" "  - –°–∏–º–≤–æ–ª–æ–≤: $file_size"

        if [ "$file_size" -gt 100 ]; then
            log "INFO" "‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ: –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"
            log "INFO" "üìñ –ü—Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:"
            head -5 "$latest_file" | sed 's/^/  /'
        else
            log "WARN" "‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ: –§–∞–π–ª –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º"
        fi
    else
        log "WARN" "‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $HOST_OUTPUT_ZH_DIR"
        log "INFO" "üîç –ü–æ–∏—Å–∫ –ª—é–±—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ..."
        find "$HOST_OUTPUT_ZH_DIR" -type f -name "*.md" -mmin -60 2>/dev/null | head -5 | while read -r file; do
            if [ -n "$file" ]; then
                log "INFO" "  –ù–∞–π–¥–µ–Ω: $file"
            fi
        done
    fi
}

process_conversion_batch() {
    log "INFO" "üîç –ü–æ–∏—Å–∫ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏..."

    local pdf_files=()
    while IFS= read -r -d '' file; do
        pdf_files+=("$file")
    done < <(find "$HOST_INPUT_DIR" -name "*.pdf" -type f -print0)

    local total_files=${#pdf_files[@]}

    if [ $total_files -eq 0 ]; then
        log "WARN" "üìÇ –ù–µ—Ç PDF —Ñ–∞–π–ª–æ–≤ –≤ $HOST_INPUT_DIR"
        echo "–ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É $HOST_INPUT_DIR –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞"
        return 0
    fi

    log "INFO" "üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: $total_files"
    echo ""

    local processed=0
    local failed=0
    local start_time
    start_time=$(date +%s)

    for pdf_file in "${pdf_files[@]}"; do
        local filename
        filename=$(basename "$pdf_file")
        echo -e "${BLUE}[–§–ê–ô–õ $((processed + failed + 1))/$total_files]${NC} $filename"

        if trigger_full_conversion "$pdf_file"; then
            ((processed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${GREEN}‚úÖ –£–°–ü–ï–®–ù–û –ö–û–ù–í–ï–†–¢–ò–†–û–í–ê–ù${NC}"
        else
            ((failed++))
            echo -e "–°—Ç–∞—Ç—É—Å: ${RED}‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò${NC}"
        fi
        echo ""
    done

    local end_time
    end_time=$(date +%s)
    local total_duration=$((end_time - start_time))

    echo "==============================================================================="
    echo -e "${GREEN}–ü–û–õ–ù–ê–Ø –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê${NC}"
    echo "==============================================================================="
    echo -e "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:"
    echo -e " –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${GREEN}$processed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e " –û—à–∏–±–æ–∫: ${RED}$failed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e " –û–±—â–µ–µ –≤—Ä–µ–º—è: ${BLUE}$total_duration${NC} —Å–µ–∫—É–Ω–¥"
    echo ""
    echo -e "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$HOST_OUTPUT_ZH_DIR${NC}"
    echo -e "üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$LOGS_DIR${NC}"
    echo ""

    if [ $failed -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º:${NC}"
        echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Airflow UI: $AIRFLOW_URL/dags"
        echo " - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ orchestrator_dag –∞–∫—Ç–∏–≤–µ–Ω"
        echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: $LOGS_DIR/conversion_*.log"
        echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö DAG –≤ –ø—Ä–æ–µ–∫—Ç–µ"
    else
        echo -e "${GREEN}üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!${NC}"
        echo ""
        echo "–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
        echo " - –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        echo " - –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: ./translate-documents.sh [—è–∑—ã–∫]"
    fi

    return 0
}

convert_only() {
    log "INFO" "üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF ‚Üí MD (–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞)"
    echo "==============================================================================="
    echo -e "${CYAN}–†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞)${NC}"
    echo -e "üìÇ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${YELLOW}$HOST_INPUT_DIR${NC}"
    echo -e "üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${YELLOW}$HOST_OUTPUT_ZH_DIR${NC}"
    echo ""
    echo -e "${YELLOW}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...${NC}"
    read -r

    process_conversion_batch
}

wait_for_translation_completion() {
    local dag_run_id="$1"
    local filename="$2"
    local target_language="$3"
    local timeout=1800  # 30 –º–∏–Ω—É—Ç
    local start_time
    start_time=$(date +%s)

    log "INFO" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Ç–∞–π–º–∞—É—Ç: ${timeout}s)..."

    while true; do
        local current_time
        current_time=$(date +%s)
        local elapsed=$((current_time - start_time))

        if [ $elapsed -gt $timeout ]; then
            log "ERROR" "‚ùå –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            return 1
        fi

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ DAG (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π DAG –ø—Ä–æ–≤–µ—Ä—è—Ç—å)
        local dag_name="orchestrator_dag"
        if [[ "$dag_run_id" == *"translation_pipeline"* ]]; then
            dag_name="translation_pipeline"
        fi

        local response
        response=$(curl -s \
            --user "$AIRFLOW_USERNAME:$AIRFLOW_PASSWORD" \
            "$AIRFLOW_URL/api/v1/dags/$dag_name/dagRuns/$dag_run_id")

        local state
        state=$(echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print(data.get('state', 'unknown'))
except:
    print('error')
" 2>/dev/null || echo "error")

        case "$state" in
            "success")
                log "INFO" "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                return 0
                ;;
            "failed"|"upstream_failed")
                log "ERROR" "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π"
                return 1
                ;;
            "running")
                local progress_msg="–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è (${elapsed}s)"
                printf "\r${YELLOW}[–û–ë–†–ê–ë–û–¢–ö–ê]${NC} $progress_msg "
                sleep 10
                ;;
            *)
                sleep 5
                ;;
        esac
    done
}

show_processing_results() {
    local processed="$1"
    local failed="$2"
    local duration="$3"
    local lang_name="$4"
    local output_dir="$5"

    echo "==============================================================================="
    echo -e "${GREEN}–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ‚Üí $lang_name${NC}"
    echo "==============================================================================="
    echo -e "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"
    echo -e " –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${GREEN}$processed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e " –û—à–∏–±–æ–∫: ${RED}$failed${NC} —Ñ–∞–π–ª–æ–≤"
    echo -e " –û–±—â–µ–µ –≤—Ä–µ–º—è: ${BLUE}$duration${NC} —Å–µ–∫—É–Ω–¥"
    echo ""
    echo -e "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$output_dir${NC}"
    echo -e "üìã –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${YELLOW}$LOGS_DIR${NC}"
    echo ""

    if [ $failed -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –æ—à–∏–±–æ–∫:${NC}"
        echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
        echo " - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
        echo " - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    else
        echo -e "${GREEN}üéâ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!${NC}"
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    show_header
    prepare_logging "session"

    if ! check_dependencies; then
        echo -e "${RED}‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ jq –∏ curl.${NC}"
        exit 1
    fi

    if ! check_services; then
        echo -e "${RED}‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d${NC}"
        exit 1
    fi

    while true; do
        echo ""
        show_menu
        read -r choice

        case $choice in
            1)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –†—É—Å—Å–∫–∏–π${NC}"
                prepare_logging "translation_ru"
                log "INFO" "–°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –†—É—Å—Å–∫–∏–π"
                full_pdf_processing "ru" "–†—É—Å—Å–∫–∏–π" "$HOST_OUTPUT_RU_DIR"
                ;;
            2)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π${NC}"
                prepare_logging "translation_en"
                log "INFO" "–°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PDF ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
                full_pdf_processing "en" "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" "$HOST_OUTPUT_EN_DIR"
                ;;
            3)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü–µ—Ä–µ–≤–æ–¥ MD ‚Üí –†—É—Å—Å–∫–∏–π${NC}"
                prepare_logging "md_translation_ru"
                log "INFO" "–°—Ü–µ–Ω–∞—Ä–∏–π: –ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤—ã—Ö MD ‚Üí –†—É—Å—Å–∫–∏–π"
                translate_existing_md "ru" "–†—É—Å—Å–∫–∏–π" "$HOST_OUTPUT_RU_DIR"
                ;;
            4)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –ü–µ—Ä–µ–≤–æ–¥ MD ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π${NC}"
                prepare_logging "md_translation_en"
                log "INFO" "–°—Ü–µ–Ω–∞—Ä–∏–π: –ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤—ã—Ö MD ‚Üí –ê–Ω–≥–ª–∏–π—Å–∫–∏–π"
                translate_existing_md "en" "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" "$HOST_OUTPUT_EN_DIR"
                ;;
            5)
                echo -e "${GREEN}–í—ã–±—Ä–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π: –¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF ‚Üí MD${NC}"
                prepare_logging "conversion"
                log "INFO" "–°—Ü–µ–Ω–∞—Ä–∏–π: –¢–æ–ª—å–∫–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF ‚Üí Markdown"
                convert_only
                ;;
            0)
                echo -e "${YELLOW}–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${NC}"
                ;;
        esac

        echo ""
        echo -e "${CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...${NC}"
        read -r
    done
}

# –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
