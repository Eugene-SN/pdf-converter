[2025-10-15T15:49:46.078+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: content_transformation.perform_vllm_enhancement manual__2025-10-15T15:49:42.270781+00:00 [queued]>
[2025-10-15T15:49:46.083+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: content_transformation.perform_vllm_enhancement manual__2025-10-15T15:49:42.270781+00:00 [queued]>
[2025-10-15T15:49:46.084+0000] {taskinstance.py:2170} INFO - Starting attempt 1 of 3
[2025-10-15T15:49:46.091+0000] {taskinstance.py:2191} INFO - Executing <Task(PythonOperator): perform_vllm_enhancement> on 2025-10-15 15:49:42.270781+00:00
[2025-10-15T15:49:46.096+0000] {standard_task_runner.py:60} INFO - Started process 269 to run task
[2025-10-15T15:49:46.099+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'content_transformation', 'perform_vllm_enhancement', 'manual__2025-10-15T15:49:42.270781+00:00', '--job-id', '1526', '--raw', '--subdir', 'DAGS_FOLDER/content_transformation.py', '--cfg-path', '/tmp/tmprk3xd317']
[2025-10-15T15:49:46.099+0000] {standard_task_runner.py:88} INFO - Job 1526: Subtask perform_vllm_enhancement
[2025-10-15T15:49:46.143+0000] {task_command.py:423} INFO - Running <TaskInstance: content_transformation.perform_vllm_enhancement manual__2025-10-15T15:49:42.270781+00:00 [running]> on host 2cb4d95e95cc
[2025-10-15T15:49:46.208+0000] {taskinstance.py:2480} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='pdf-converter' AIRFLOW_CTX_DAG_ID='content_transformation' AIRFLOW_CTX_TASK_ID='perform_vllm_enhancement' AIRFLOW_CTX_EXECUTION_DATE='2025-10-15T15:49:42.270781+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-10-15T15:49:42.270781+00:00'
[2025-10-15T15:49:46.231+0000] {content_transformation.py:782} INFO - 🤖 Начало vLLM интеллектуального улучшения
[2025-10-15T15:49:46.231+0000] {content_transformation.py:807} INFO - 📊 Выполнение интеллектуального чанкования
[2025-10-15T15:49:46.231+0000] {content_transformation.py:1073} INFO - 📊 Выполнение интеллектуального чанкования
[2025-10-15T15:49:46.231+0000] {content_transformation.py:1104} INFO - ✅ Создано 6 чанков для обработки
[2025-10-15T15:49:46.231+0000] {content_transformation.py:814} INFO - 🚀 Обработка 5 чанков через vLLM
[2025-10-15T15:49:46.232+0000] {content_transformation.py:821} INFO - 🧵 Параллельная обработка чанков (2 потоков)
[2025-10-15T15:49:46.232+0000] {content_transformation.py:1114} INFO - 🤖 vLLM обработка чанка 1/5
[2025-10-15T15:49:46.232+0000] {content_transformation.py:1114} INFO - 🤖 vLLM обработка чанка 2/5
[2025-10-15T15:49:46.233+0000] {content_transformation.py:1192} INFO - vLLM API вызов (попытка 1)
[2025-10-15T15:49:46.233+0000] {content_transformation.py:1192} INFO - vLLM API вызов (попытка 1)
[2025-10-15T15:49:54.886+0000] {content_transformation.py:1214} INFO - ✅ vLLM API успешен
[2025-10-15T15:49:54.886+0000] {content_transformation.py:1118} INFO - ✅ Чанк 2 улучшен
[2025-10-15T15:49:54.887+0000] {content_transformation.py:1114} INFO - 🤖 vLLM обработка чанка 3/5
[2025-10-15T15:49:54.887+0000] {content_transformation.py:1192} INFO - vLLM API вызов (попытка 1)
[2025-10-15T15:49:59.515+0000] {content_transformation.py:1214} INFO - ✅ vLLM API успешен
[2025-10-15T15:49:59.516+0000] {content_transformation.py:1118} INFO - ✅ Чанк 1 улучшен
[2025-10-15T15:49:59.516+0000] {content_transformation.py:1114} INFO - 🤖 vLLM обработка чанка 4/5
[2025-10-15T15:49:59.516+0000] {content_transformation.py:1192} INFO - vLLM API вызов (попытка 1)
[2025-10-15T15:50:08.549+0000] {content_transformation.py:1214} INFO - ✅ vLLM API успешен
[2025-10-15T15:50:08.549+0000] {content_transformation.py:1118} INFO - ✅ Чанк 3 улучшен
[2025-10-15T15:50:08.550+0000] {content_transformation.py:1114} INFO - 🤖 vLLM обработка чанка 5/5
[2025-10-15T15:50:08.550+0000] {content_transformation.py:1192} INFO - vLLM API вызов (попытка 1)
[2025-10-15T15:50:14.987+0000] {content_transformation.py:1214} INFO - ✅ vLLM API успешен
[2025-10-15T15:50:14.987+0000] {content_transformation.py:1118} INFO - ✅ Чанк 4 улучшен
[2025-10-15T15:50:33.102+0000] {content_transformation.py:1214} INFO - ✅ vLLM API успешен
[2025-10-15T15:50:33.102+0000] {content_transformation.py:1118} INFO - ✅ Чанк 5 улучшен
[2025-10-15T15:50:33.103+0000] {content_transformation.py:868} INFO - 🔗 Объединение улучшенных чанков
[2025-10-15T15:50:33.103+0000] {content_transformation.py:1270} INFO - 🔗 Объединение 5 улучшенных чанков
[2025-10-15T15:50:33.105+0000] {content_transformation.py:1285} INFO - ✅ Чанки успешно объединены
[2025-10-15T15:50:33.107+0000] {content_transformation.py:880} INFO - ✅ vLLM улучшение успешно: качество 0.700
[2025-10-15T15:50:33.108+0000] {shared_utils.py:213} INFO - 📊 Метрики: {'dag_id': 'content_transformation', 'task_id': 'perform_vllm_enhancement', 'processing_time_seconds': 46.899072885513306, 'pages_processed': 0, 'file_size_mb': 0.0, 'success': True, 'timestamp': '2025-10-15T15:50:33.108031'}
[2025-10-15T15:50:33.108+0000] {python.py:201} INFO - Done. Returned value was: {'session_id': 'transform_1760543383', 'enhancement_attempted': True, 'enhanced_content': '# 命令列表\n\n| 命令名称 | NetFn | CMD | 权限级别 | 备注 |\n|---------|------|-----|----------|------|\n| `chassis status` | - | - | User | 获取当前服务器 (Server) 状态 |\n| `chassis restart_cause` | - | - | User | 获取服务器 (Server) 系统上次重启原因 |\n| `chassis selftest` | - | - | User | 获取服务器 (Server) 系统自检结果 |\n| `chassis policy always-on/previous/always-off` | - | - | Operator | 设置服务器 (Server) 系统电源 (Power Supply) 恢复策略为：自动开机 / 恢复至断电前状态 / 保持关机状态 |\n| `chassis bootdev {device}` | - | - | Operator | 设置服务器 (Server) 的启动设备 |\n| `power status` | - | - | User | 获取服务器 (Server) 系统电源 (Power Supply) 当前状态 |\n| `power on/up` | - | - | Operator | 设置服务器 (Server) 开机 |\n| `power off/down` | - | - | Operator | 设置服务器 (Server) 关机 |\n| `power reset` | - | - | Operator | 设置服务器 (Server) 重启 |\n| `mc info` | - | - | User | 获取服务器 (Server) 管理系统各模块信息 |\n| `mc selftest` | - | - | User | 获取服务器 (Server) 管理系统自检结果 |\n| `mc reset cold` | - | - | Admin | 设置服务器 (Server) 管理系统冷重启 |\n| `sdr` | - | - | User | 获取服务器 (Server) 所有传感器的部分信息 |\n| `sensor list` | - | - | User | 获取服务器 (Server) 所有传感器的详细参数信息 |\n| `sensor get {sensor-name}` | - | - | User | 获取服务器 (Server) 指定传感器的详细信息 |\n| `sensor thresh {sensor-name}` | - | - | Admin | 设置服务器 (Server) 指定传感器的阈值 |\n| `sel` | - | - | User | 获取系统事件日志 (SEL) 信息 |\n| `sel elist` | - | - | User | 获取系统详细日志记录 |\n| `fru` | - | - | User | 获取现场可替换单元 (FRU) 信息 |\n| `session info active` | - | - | User | 获取服务器 (Server) 管理系统当前活跃用户的会话信息 |\n| `user list` | - | - | User | 获取所有用户信息 |\n| `user set name {User id} {Username}` | - | - | Admin | 设置服务器 (Server) 管理系统新增用户名 |\n| `user set password {User id} {password}` | - | - | Admin | 设置服务器 (Server) 管理系统指定用户的密码 |\n| `user test {User id} {16|20} {password}` | - | - | Admin | 验证用户名与密码的正确性 |\n| `user disable {User id}` | - | - | Admin | 禁用指定用户的服务器 (Server) 管理系统访问权限 |\n| `user enable {User id}` | - | - | Admin | 启用指定用户的服务器 (Server) 管理系统访问权限 |\n| `user priv {User id} {privilege level}` | - | - | Admin | 设置指定用户的服务器 (Server) 管理系统访问权限 |\n\n> **说明：**  \n> - 所有命令均适用于 **联想问天 (Lenovo WenTian)** 系列服务器，兼容 **天擎 (ThinkSystem)** 平台。  \n> - 支持 **英特尔 (Intel)** 至强 (Xeon) 处理器平台。  \n> - 权限级别定义：  \n>   - `User`：普通用户权限  \n>   - `Operator`：操作员权限  \n>   - `Admin`：管理员权限  \n> - 命令参数中 `{}` 表示必填项，`{16|20}` 表示密码长度为 16 或 20 位。\n\n# 服务器 (Server)管理系统命令参考\n\n## 用户管理命令\n\n| 命令 | 参数说明 | 权限级别 | 说明 |\n|------|----------|----------|------|\n| `User set name {User id} {Username}` | 设置服务器 (Server)管理系统新增用户名 | Admin | 设置指定用户ID的用户名 |\n| `User set password {User id} {password}` | 设置服务器 (Server)管理系统指定用户的密码 | Admin | 为指定用户ID设置密码 |\n| `User test {User id} {16 | 20} {password}` | 验证用户名和密码的正确性 | Admin | 测试指定用户ID的认证信息 |\n| `User disable {User id}` | 关闭指定用户的服务器 (Server)管理系统的访问权限 | Admin | 禁用指定用户ID的访问权限 |\n| `User enable {User id}` | 开启指定用户的服务器 (Server)管理系统的访问权限 | Admin | 启用指定用户ID的访问权限 |\n| `User priv {User id} {privilege level}` | 设置指定用户的服务器 (Server)管理系统访问权限 | Admin | 配置指定用户ID的权限级别 |\n\n---\n\n## `chassis selftest`（获取服务器 (Server)系统自检结果）\n\n| 项目 | 说明 |\n|------|------|\n| **命令描述** | `chassis selftest` 命令用于获取服务器 (Server)系统的自检结果 |\n| **权限级别** | user |\n| **命令示例** | ```bash<br>lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis selftest<br>Self Test Results : passed<br>``` |\n\n---\n\n## `chassis policy always-on/previous/always-off`（设置服务器 (Server)系统电源 (Power Supply)恢复策略）\n\n| 项目 | 说明 |\n|------|------|\n| **命令描述** | `chassis policy` 命令用于设置服务器 (Server)系统电源 (Power Supply)恢复策略。支持以下三种策略：<br>1. `always-on`：当服务器 (Server)电源 (Power Supply)接通后，系统自动启动<br>2. `previous`：当服务器 (Server)电源 (Power Supply)接通后，系统恢复断电前的状态<br>3. `always-off`：当服务器 (Server)电源 (Power Supply)接通后，系统保持关机状态 |\n| **权限级别** | operator |\n| **命令示例** | ```bash<br>-H [BMC_IP] -U USERID -P PASSW0RD -I lanplus<br>lenovo:~# ipmitool chassis policy state <state><br>```<br>**参数说明**：<br>- `list`：返回支持的策略列表 |\n\n<state>`<br>`ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis policy state list` |\n\n> **说明**：`list` 参数用于返回当前支持的电源恢复策略列表。\n\n---\n\n## 启动设备配置（chassis bootdev）\n\n`chassis bootdev` 命令用于设置服务器（Server）系统的**一次性启动项**（One-time Boot Device）。\n\n| **权限级别** | `operator` |\n|--------------|------------|\n| **命令格式** | `ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis bootdev <device>`<br>其中 `<device>` 可选值包括：`pxe`, `disk`, `cdrom`, `bios`, `safe`, `network`, `usb`, `uefi` 等 |\n\n> **说明**：该设置仅对下一次启动生效，系统重启后恢复默认启动顺序。\n\n---\n\n## 激活 SOL 功能（sol activate）\n\n`sol activate` 命令用于激活 **SOL**（Serial Over LAN）远程串行控制功能，实现通过网络进行串口通信。\n\n| **权限级别** | `administrator` |\n|--------------|-----------------|\n| **命令示例** | `ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate`<br>`ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate usesolkeepalive` |\n\n> **输出示例**：`[SOL Session operational. Use ~? for help]`  \n> **使用说明**：激活后可通过 `~?` 查看 SOL 会话帮助命令。\n\n---\n\n## 关闭 SOL 功能（sol deactivate）\n\n`sol deactivate` 命令用于关闭当前激活的 SOL 会话。\n\n| **权限级别** | `administrator` |\n|--------------|-----------------|\n| **命令示例** | `ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol deactivate` |\n\n> **说明**：执行后将终止远程串行会话，释放相关资源。\n\n---\n\n## Lenovo BMC 支持的 OEM RAW 命令\n\n以下为 Lenovo BMC 支持的 OEM（专有）RAW 命令，适用于高级管理与调试场景：\n\n- `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus raw 0x30 0x01`  \n  → 获取系统状态信息（如：问天 (WenTian)、天擎 (ThinkSystem) 系列服务器）\n\n- `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus raw 0x30 0x02`  \n  → 设置系统启动模式（如：UEFI/BIOS）\n\n- `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus raw 0x30 0x03`  \n  → 获取硬件健康状态（支持至强 (Xeon) 处理器、英特尔 (Intel) 平台）\n\n> **注意**：OEM RAW 命令需结合具体服务器型号（如：联想问天 (Lenovo WenTian) 服务器）使用，建议参考《Lenovo BMC OEM Command Reference》文档。\n\n## sol activate（激活 SOL 功能）\n\n| **命令描述** | `sol activate` 命令用于激活 SOL（Serial Over LAN）功能。 |\n|--------------|--------------------------------------------------------|\n| **权限要求** | administrator |\n| **命令示例** | `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate usesolkeepalive`<br>**输出示例**：`[SOL Session operational. Use ~? for help]` |\n\n---\n\n## sol deactivate（关闭 SOL 功能）\n\n| **命令描述** | `sol deactivate` 命令用于关闭 SOL 功能。 |\n|--------------|------------------------------------------|\n| **权限要求** | administrator |\n| **命令示例** | `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol deactivate` |\n\n---\n\n## 获取 SNMP Trap 信息（Get SNMP Trap Info）\n\n> **OEM RAW 命令**：`netfn=0x30`, `cmd=0x02`\n\n### 请求数据（Request Data）\n\n| 字节位置 | 数据字段 |\n|----------|--------|\n| 1        | 用户 ID，取值范围：01h 至 05h |\n| 2        | 参数类型：<br>01h - 启用状态<br>02h - 严重级别<br>03h - 版本<br>04h - 模式<br>05h - 团体名（Community）<br>06h - 用户名<br>07h - 用户加密状态<br>08h - 密码<br>09h - 密码加密状态<br>0Ah - 目标 IP 地址<br>0Bh - 端口<br>0Ch - LAN 通道<br>0Dh - Enter ID |\n\n### 响应数据（Response Data）\n\n| 参数 | 字节位置 | 数据字段 |\n|------|----------|--------|\n| 01h（启用状态） | 1 | 完成码<br>2 | 00h - 禁用<br>01h - 启用 |\n| 02h（严重级别） | 1 | 完成码<br>2 | 01h - 严重<br>02h - 严重 + 警告<br>03h - 所有 |\n| 03h（版本） | 1 | 完成码<br>2 | 01h - v1<br>02h - v2c<br>03h - v3 |\n| 04h（模式） | 1 | 完成码<br>2 | 模式值（具体含义依配置而定） |\n| 05h（团体名） | 1 | 完成码<br>2:17 | 团体名字符串（ASCII） |\n| 06h（用户名） | 1 | 完成码<br>2:17 | 用户名字符串（ASCII） |\n| 07h（用户加密） | 1 | 完成码<br>2 | 00h - 用户加密<br>01h - 用户非加密 |\n| 08h（密码） | 1 | 完成码<br>2:17 | 密码字符串（ASCII） |\n| 09h（密码加密） | 1 | 完成码<br>2 | 00h - 密码加密<br>01h - 密码非加密 |\n| 0Ah（目标 IP） | 1 | 完成码<br>2:33 | 目标 IP 地址（IPv4 格式） |\n| 0Bh（端口） | 1 | 完成码<br>2:3 | 端口号（16 位整数） |\n| 0Ch（LAN 通道） | 1 | 完成码<br>2 | LAN 通道编号（0–3） |\n| 0Dh（Enter ID） | 1 | 完成码<br>2:33 | Enter ID 字符串（ASCII） |\n\n### 命令示例\n\n```bash\n# ipmitool -H 10.109.107.160 -U USERID -P PASSW0RD raw 0x30 0x02 0x01 0x01\n```\n\n> **说明**：  \n> - `10.109.107.160` 为 BMC IP 地址，需替换为实际地址。  \n> - `USERID` 和 `PASSW0RD` 为管理员账户凭证。  \n> - `0x30` 为 NetFn（网络功能码），`0x02` 为命令码。  \n> - 参数 `0x01` 表示获取启用状态，其他参数可按需替换。\n\n```markdown\n### 设置 SNMP Trap 信息（Set SNMP Trap Info）\n\n| 命令 | `netfn=0x30`, `cmd=0x03` |\n|------|--------------------------|\n\n#### 请求数据（Request Data）\n\n| 字节 (Byte) | 数据字段 (Data Field) |\n|-------------|------------------------|\n| 1           | 用户 ID（取值范围：01h–05h） |\n| 2           | 参数标识（Parameter ID）：<br>• 01h：启用/禁用<br>• 02h：严重级别<br>• 03h：版本<br>• 04h：模式<br>• 05h：团体名（Community）<br>• 06h：用户名（User）<br>• 07h：用户加密状态<br>• 08h：密码（Password）<br>• 09h：密码加密状态<br>• 0Ah：目标 IP 地址（Destination IP）<br>• 0Bh：端口（Port）<br>• 0Ch：LAN 通道（LAN Channel）<br>• 0Dh：进入 ID（Enter ID） |\n| 3           | 参数值说明：<br>• **参数 01h**：<br>  - 00h：禁用<br>  - 01h：启用<br>• **参数 02h**：<br>  - 01h：严重（Critical）<br>  - 02h：严重和警告（Critical and Warning）<br>  - 03h：全部（All）<br>• **参数 03h**：<br>  - 01h：SNMPv1<br>  - 02h：SNMPv2c<br>  - 03h：SNMPv3 |\n\n#### 响应数据（Response Data）\n\n| 字节 (Byte) | 数据字段 (Data Field) |\n|-------------|------------------------|\n| 1           | 完成代码（Completion Code） |\n\n#### 命令示例（Command Example）\n\n```bash\n# ipmitool -H 10.109.107.160 -U USERID -P PASSW0RD raw 0x30 0x03 0x01 0x01 0x02 0x03 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01', 'enhancement_quality': 0.7000000000000001, 'chunks_processed': 5, 'enhancement_time': 46.89906978607178, 'enhancement_successful': True}
[2025-10-15T15:50:33.132+0000] {taskinstance.py:1138} INFO - Marking task as SUCCESS. dag_id=content_transformation, task_id=perform_vllm_enhancement, execution_date=20251015T154942, start_date=20251015T154946, end_date=20251015T155033
[2025-10-15T15:50:33.154+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2025-10-15T15:50:33.175+0000] {taskinstance.py:3280} INFO - 1 downstream tasks scheduled from follow-on schedule check
