[2025-10-08T13:36:37.876+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: content_transformation.perform_vllm_enhancement manual__2025-10-08T13:36:35.159075+00:00 [queued]>
[2025-10-08T13:36:37.882+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: content_transformation.perform_vllm_enhancement manual__2025-10-08T13:36:35.159075+00:00 [queued]>
[2025-10-08T13:36:37.882+0000] {taskinstance.py:2170} INFO - Starting attempt 1 of 3
[2025-10-08T13:36:37.890+0000] {taskinstance.py:2191} INFO - Executing <Task(PythonOperator): perform_vllm_enhancement> on 2025-10-08 13:36:35.159075+00:00
[2025-10-08T13:36:37.895+0000] {standard_task_runner.py:60} INFO - Started process 424 to run task
[2025-10-08T13:36:37.897+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'content_transformation', 'perform_vllm_enhancement', 'manual__2025-10-08T13:36:35.159075+00:00', '--job-id', '1014', '--raw', '--subdir', 'DAGS_FOLDER/content_transformation.py', '--cfg-path', '/tmp/tmp8210kjzg']
[2025-10-08T13:36:37.898+0000] {standard_task_runner.py:88} INFO - Job 1014: Subtask perform_vllm_enhancement
[2025-10-08T13:36:37.941+0000] {task_command.py:423} INFO - Running <TaskInstance: content_transformation.perform_vllm_enhancement manual__2025-10-08T13:36:35.159075+00:00 [running]> on host 45f6d07b53bc
[2025-10-08T13:36:38.004+0000] {taskinstance.py:2480} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='pdf-converter' AIRFLOW_CTX_DAG_ID='content_transformation' AIRFLOW_CTX_TASK_ID='perform_vllm_enhancement' AIRFLOW_CTX_EXECUTION_DATE='2025-10-08T13:36:35.159075+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-10-08T13:36:35.159075+00:00'
[2025-10-08T13:36:38.042+0000] {content_transformation.py:434} INFO - 🤖 Начало vLLM интеллектуального улучшения
[2025-10-08T13:36:38.042+0000] {content_transformation.py:459} INFO - 📊 Выполнение интеллектуального чанкования
[2025-10-08T13:36:38.042+0000] {content_transformation.py:728} INFO - 📊 Выполнение интеллектуального чанкования
[2025-10-08T13:36:38.042+0000] {content_transformation.py:759} INFO - ✅ Создано 6 чанков для обработки
[2025-10-08T13:36:38.043+0000] {content_transformation.py:466} INFO - 🚀 Обработка 5 чанков через vLLM
[2025-10-08T13:36:38.043+0000] {content_transformation.py:473} INFO - 🧵 Параллельная обработка чанков (2 потоков)
[2025-10-08T13:36:38.043+0000] {content_transformation.py:769} INFO - 🤖 vLLM обработка чанка 1/5
[2025-10-08T13:36:38.043+0000] {content_transformation.py:769} INFO - 🤖 vLLM обработка чанка 2/5
[2025-10-08T13:36:38.044+0000] {content_transformation.py:852} INFO - vLLM API вызов (попытка 1)
[2025-10-08T13:36:38.044+0000] {content_transformation.py:852} INFO - vLLM API вызов (попытка 1)
[2025-10-08T13:37:04.863+0000] {content_transformation.py:872} INFO - ✅ vLLM API успешен
[2025-10-08T13:37:04.863+0000] {content_transformation.py:773} INFO - ✅ Чанк 2 улучшен
[2025-10-08T13:37:04.863+0000] {content_transformation.py:769} INFO - 🤖 vLLM обработка чанка 3/5
[2025-10-08T13:37:04.864+0000] {content_transformation.py:852} INFO - vLLM API вызов (попытка 1)
[2025-10-08T13:37:18.010+0000] {content_transformation.py:872} INFO - ✅ vLLM API успешен
[2025-10-08T13:37:18.010+0000] {content_transformation.py:773} INFO - ✅ Чанк 3 улучшен
[2025-10-08T13:37:18.010+0000] {content_transformation.py:769} INFO - 🤖 vLLM обработка чанка 4/5
[2025-10-08T13:37:18.010+0000] {content_transformation.py:852} INFO - vLLM API вызов (попытка 1)
[2025-10-08T13:37:24.525+0000] {content_transformation.py:872} INFO - ✅ vLLM API успешен
[2025-10-08T13:37:24.526+0000] {content_transformation.py:773} INFO - ✅ Чанк 1 улучшен
[2025-10-08T13:37:24.526+0000] {content_transformation.py:769} INFO - 🤖 vLLM обработка чанка 5/5
[2025-10-08T13:37:24.526+0000] {content_transformation.py:852} INFO - vLLM API вызов (попытка 1)
[2025-10-08T13:37:55.849+0000] {content_transformation.py:872} INFO - ✅ vLLM API успешен
[2025-10-08T13:37:55.849+0000] {content_transformation.py:773} INFO - ✅ Чанк 5 улучшен
[2025-10-08T13:38:27.344+0000] {content_transformation.py:872} INFO - ✅ vLLM API успешен
[2025-10-08T13:38:27.345+0000] {content_transformation.py:773} INFO - ✅ Чанк 4 улучшен
[2025-10-08T13:38:27.345+0000] {content_transformation.py:520} INFO - 🔗 Объединение улучшенных чанков
[2025-10-08T13:38:27.345+0000] {content_transformation.py:913} INFO - 🔗 Объединение 5 улучшенных чанков
[2025-10-08T13:38:27.346+0000] {content_transformation.py:928} INFO - ✅ Чанки успешно объединены
[2025-10-08T13:38:27.348+0000] {content_transformation.py:532} INFO - ✅ vLLM улучшение успешно: качество 1.000
[2025-10-08T13:38:27.349+0000] {content_transformation.py:546} INFO - 🔧 Результат vLLM дополнен закрывающей тройной кавычкой
[2025-10-08T13:38:27.349+0000] {shared_utils.py:170} INFO - 📊 Метрики: {'dag_id': 'content_transformation', 'task_id': 'perform_vllm_enhancement', 'processing_time_seconds': 109.34389209747314, 'pages_processed': 0, 'file_size_mb': 0.0, 'success': True, 'timestamp': '2025-10-08T13:38:27.349143'}
[2025-10-08T13:38:27.349+0000] {python.py:201} INFO - Done. Returned value was: {'session_id': 'transform_1759930596', 'enhancement_attempted': True, 'enhanced_content': '# upload_1759930534_test_short\n\n## 命令列表\n\n| Command Name                                  | NetFn   | CMD   | Privilege   | 备注                                                                                     |\n|-----------------------------------------------|---------|-------|-------------|------------------------------------------------------------------------------------------|\n| chassis status                                |         |       | User        | 获取当前服务器 (Server) 状态                                                         |\n| chassis restart_cause                         |         |       | User        | 获取服务器 (Server) 系统上次重启原因                                                 |\n| chassis selftest                              |         |       | User        | 获取服务器 (Server) 系统自检结果                                                     |\n| chassis policy always-on/previous/always-off  |         |       | operator    | 设置服务器 (Server) 系统电源 (Power Supply) 恢复策略为自动开机 / 恢复到断电前状态 / 保持关机状态 |\n| chassis bootdev {device}                      |         |       | operator    | 设置服务器 (Server) 的启动项                                                         |\n| power status                                  |         |       | User        | 获取服务器 (Server) 系统电源 (Power Supply) 当前状态                                 |\n| power on/up                                   |         |       | operator    | 设置服务器 (Server) 开机                                                             |\n| power off/down                                |         |       | operator    | 设置服务器 (Server) 关机                                                             |\n| power reset                                   |         |       | operator    | 设置服务器 (Server) 重启                                                             |\n| mc info                                       |         |       | User        | 获取服务器 (Server) 管理系统各个模块信息                                             |\n| mc selftest                                   |         |       | User        | 获取服务器 (Server) 管理系统自检结果                                                 |\n| mc reset cold                                 |         |       | Admin       | 设置服务器 (Server) 管理系统冷重启                                                   |\n| sdr                                           |         |       | User        | 获取服务器 (Server) 所有传感器的部分信息                                             |\n| sensor list                                   |         |       | User        | 获取服务器 (Server) 所有传感器的详细参数信息                                         |\n| sensor get {sensor-name}                      |         |       | User        | 获取服务器 (Server) 指定传感器的详细信息                                             |\n| sensor thresh {sensor-name}                   |         |       | Admin       | 设置服务器 (Server) 指定传感器的阈值                                                 |\n| sel                                           |         |       | User        | 获取系统日志信息                                                                     |\n| sel elist                                     |         |       | User        | 获取系统详细日志记录                                                                 |\n| fru                                           |         |       | User        | 获取现场可替换单元信息                                                               |\n| session info active                           |         |       | User        | 获取服务器 (Server) 管理系统当前活跃用户的会话信息                                   |\n| User list                                     |         |       | User        | 获取所有用户信息                                                                     |\n| User set name {User id} {Username}            |         |       | Admin       | 设置服务器 (Server) 管理系统新增用户名                                               |\n| User set password {User id} {password}        |         |       | Admin       | 设置服务器 (Server) 管理系统指定用户的密码                                           |\n| User test {User id} {16|20} {password}        |         |       | Admin       | 验证用户名密码的正确性                                                               |\n| User disable {User id}                        |         |       | Admin       | 关闭指定用户的服务器 (Server) 管理系统的访问权限                                     |\n| User enable {User id}                         |         |       | Admin       | 开启指定用户的服务器 (Server) 管理系统的访问权限                                     |\n| User priv {User id} {privilege level}         |         |       | Admin       | 设置指定用户的服务器 (Server) 管理系统访问权限                                       |\n\n## 用户权限管理\n\n### 用户权限操作命令\n\n| **命令**               | **权限** | **描述**                                                                 |\n|------------------------|----------|--------------------------------------------------------------------------|\n| User disable {User id} | Admin    | 关闭指定用户的服务器 (Server)管理系统的访问权限                          |\n| User enable {User id}  | Admin    | 开启指定用户的服务器 (Server)管理系统的访问权限                          |\n| User priv {User id} {privilege level} | Admin    | 设置指定用户的服务器 (Server)管理系统访问权限                |\n\n---\n\n## chassis selftest（获取服务器 (Server)系统自检结果）\n\n### 命令描述\n\n`chassis selftest` 命令用于获取服务器 (Server) 系统的自检结果。\n\n| **属性**       | **说明**                                                                 |\n|----------------|--------------------------------------------------------------------------|\n| **权限**       | user                                                                     |\n| **命令示例**   | ```bash lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis selftest Self Test Results : passed ``` |\n\n---\n\n## chassis policy always-on/previous/always-off（设置服务器 (Server)系统电源 (Power Supply)恢复策略）\n\n### 命令描述\n\n`chassis policy` 命令用于设置服务器 (Server) 系统的电源 (Power Supply) 恢复策略。支持以下三种策略：\n\n1. **always-on**：当服务器 (Server) 电源 (Power Supply) 接通后，系统会自动启动。\n2. **previous**：当服务器 (Server) 电源 (Power Supply) 接通后，系统恢复至电源 (Power Supply) 拔出前的状态。\n3. **always-off**：当服务器 (Server) 电源 (Power Supply) 接通后，系统保持关机状态。\n\n| **属性**       | **说明**                                                                 |\n|----------------|--------------------------------------------------------------------------|\n| **权限**       | operator                                                                |\n| **命令示例**   | ```bash lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis policy state <state>: list : return supported policies ``` |\n\n## chassis bootdev {device} （设置服务器 (Server) 的启动项）\n\n| Command Description   | chassis bootdev 命令用来设置服务器 (Server) 系统一次性启动选项。                                                                 |\n|-----------------------|----------------------------------------------------------------------------------------------------------------------------------------|\n| Privilege             | operator                                                                                                                               |\n\n## sol activate （激活 SOL 功能）\n\n| Command Description   | sol activate 命令用来激活 SOL 功能。                                                                                                 |\n|-----------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n| Privilege             | administrator                                                                                                                         |\n| Command Example       | ```bash lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate usesolkeepalive [SOL Session operational. Use ~? for help] ``` |\n\n## Additional Command Example\n\n| Command Example       | ```bash -H [BMC_IP] -U USERID -P PASSW0RD -I ```                                                                                     |\n|-----------------------|-----------------------------------------------------------------------------------------------------------------------------------------|\n|                       | ```bash lenovo:~# ipmitool lanplus chassis policy state <state>: list : return supported policies ```                                   |\n\nt\n\n| Byte | Data Field                                                                 |\n|------|---------------------------------------------------------------------------|\n| 1    | User ID (范围：`01h` 到 `05h`)                                            |\n| 2    | Parameter (具体参数说明如下)                                              |\n\n#### Parameter Details\n\n| Parameter Value | Description                                                                 |\n|-----------------|-----------------------------------------------------------------------------|\n| `01h`           | 使能状态：`00h` - 禁用，`01h` - 启用                                     |\n| `02h`           | 严重性：`01h` - 严重，`02h` - 严重和警告，`03h` - 所有               |\n| `03h`           | 版本：`01h` - v1，`02h` - v2c，`03h` - v3                               |\n| `04h`           | 模式                                                                 |\n| `05h`           | 社区字符串（长度：17 字节）                                           |\n| `06h`           | 用户名（长度：17 字节）                                               |\n| `07h`           | 用户加密：`00h` - 加密，`01h` - 非加密                                 |\n| `08h`           | 密码（长度：17 字节）                                                 |\n| `09h`           | 密码加密：`00h` - 加密，`01h` - 非加密                                 |\n| `0Ah`           | 目标 IP 地址（长度：33 字节）                                         |\n| `0Bh`           | 端口号（长度：3 字节）                                                |\n| `0Ch`           | LAN 通道                                                              |\n| `0Dh`           | 进入 ID（长度：33 字节）                                             |\n\n### Response Data Format\n\n| Parameter Value | Byte | Data Field                                                                 |\n|-----------------|------|---------------------------------------------------------------------------|\n| `01h`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2    | 使能状态：`00h` - 禁用，`01h` - 启用                                     |\n| `02h`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2    | 严重性：`01h` - 严重，`02h` - 严重和警告，`03h` - 所有               |\n| `03h`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2    | 版本：`01h` - v1，`02h` - v2c，`03h` - v3                               |\n| `04h`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2    | 模式                                                                 |\n| `05h`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2:17 | 社区字符串                                                             |\n| `06h`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2:17 | 用户名                                                                 |\n| `07h`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2    | 用户加密：`00h` - 加密，`01h` - 非加密                                 |\n| `08h`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2:17 | 密码                                                                   |\n| `09h`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2    | 密码加密：`00h` - 加密，`01h` - 非加密                                 |\n| `0Ah`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2:33 | 目标 IP 地址                                                           |\n| `0Bh`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2:3  | 端口号                                                                 |\n| `0Ch`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2    | LAN 通道                                                               |\n| `0Dh`           | 1    | 完成码 (`Completion Code`)                                              |\n|                 | 2:33 | 进入 ID                                                               |\n\n### Command Example\n\n```bash\n# ipmitool -H 10.109.107.160 -U USERID -P PASSW0RD raw 0x30 0x02 01\n```\n\n### Notes\n\n- 请确保在执行命令时替换 `[BMC_IP]`、`USERID` 和 `PASSW0RD` 为实际的 BMC 地址、用户名和密码。\n- 参数值需根据具体需求进行设置，例如目标 IP 地址、端口号等。\n\n | Parameter  | - `01h` - Enable/Disable<br>- `02h` - Severity<br>- `03h` - Version<br>- `04h` - Mode<br>- `05h` - Community<br>- `06h` - User<br>- `07h` - User Encrypt<br>- `08h` - Password<br>- `09h` - Pass Encrypt<br>- `0Ah` - Destination IP<br>- `0Bh` - Port<br>- `0Ch` - LAN Channel<br>- `0Dh` - Enter ID |\n| 3    | Parameter Value | - For parameter `01h`:<br>  - `00h` - Disable<br>  - `01h` - Enable<br>- For parameter `02h`:<br>  - `01h` - Critical<br>  - `02h` - Critical and Warning<br>  - `03h` - All<br>- For parameter `03h`: (Further details required) |\n\n### Example Parameter Values\n| Parameter Code | Value | Description |\n|----------------|-------|-------------|\n| `01h`          | `00h` | Disable SNMP Trap |\n| `01h`          | `01h` | Enable SNMP Trap |\n| `02h`          | `01h` | Critical Severity |\n| `02h`          | `02h` | Critical and Warning Severity |\n| `02h`          | `03h` | All Severity Levels |\n\n### Notes:\n- Ensure that the correct parameter values are set based on the requirements.\n- The `User ID` must be within the valid range (`01h` to `05h`).\n- Additional parameter values for `03h` (Version) and other parameters may need to be specified based on the system configuration.\n```\n```\n', 'enhancement_quality': 1.0, 'chunks_processed': 5, 'enhancement_time': 109.34388756752014, 'enhancement_successful': True}
[2025-10-08T13:38:27.372+0000] {taskinstance.py:1138} INFO - Marking task as SUCCESS. dag_id=content_transformation, task_id=perform_vllm_enhancement, execution_date=20251008T133635, start_date=20251008T133637, end_date=20251008T133827
[2025-10-08T13:38:27.403+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2025-10-08T13:38:27.424+0000] {taskinstance.py:3280} INFO - 1 downstream tasks scheduled from follow-on schedule check
