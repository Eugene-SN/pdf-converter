[2025-10-09T16:00:35.996+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: content_transformation.save_transformed_content manual__2025-10-09T15:58:46.183404+00:00 [queued]>
[2025-10-09T16:00:36.001+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: content_transformation.save_transformed_content manual__2025-10-09T15:58:46.183404+00:00 [queued]>
[2025-10-09T16:00:36.001+0000] {taskinstance.py:2170} INFO - Starting attempt 1 of 3
[2025-10-09T16:00:36.009+0000] {taskinstance.py:2191} INFO - Executing <Task(PythonOperator): save_transformed_content> on 2025-10-09 15:58:46.183404+00:00
[2025-10-09T16:00:36.014+0000] {standard_task_runner.py:60} INFO - Started process 213 to run task
[2025-10-09T16:00:36.016+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'content_transformation', 'save_transformed_content', 'manual__2025-10-09T15:58:46.183404+00:00', '--job-id', '1244', '--raw', '--subdir', 'DAGS_FOLDER/content_transformation.py', '--cfg-path', '/tmp/tmpxb2_4ig8']
[2025-10-09T16:00:36.017+0000] {standard_task_runner.py:88} INFO - Job 1244: Subtask save_transformed_content
[2025-10-09T16:00:36.058+0000] {task_command.py:423} INFO - Running <TaskInstance: content_transformation.save_transformed_content manual__2025-10-09T15:58:46.183404+00:00 [running]> on host 55aa37341c5f
[2025-10-09T16:00:36.123+0000] {taskinstance.py:2480} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='pdf-converter' AIRFLOW_CTX_DAG_ID='content_transformation' AIRFLOW_CTX_TASK_ID='save_transformed_content' AIRFLOW_CTX_EXECUTION_DATE='2025-10-09T15:58:46.183404+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-10-09T15:58:46.183404+00:00'
[2025-10-09T16:00:36.147+0000] {shared_utils.py:170} INFO - 📊 Метрики: {'dag_id': 'content_transformation', 'task_id': 'save_transformed_content', 'processing_time_seconds': 0.023004531860351562, 'pages_processed': 0, 'file_size_mb': 0.0, 'success': True, 'timestamp': '2025-10-09T16:00:36.147039'}
[2025-10-09T16:00:36.147+0000] {content_transformation.py:1408} INFO - 💾 Полностью трансформированный контент сохранен: /app/output/zh/1760025489_test_short.md
[2025-10-09T16:00:36.147+0000] {python.py:201} INFO - Done. Returned value was: {'markdown_file': '/app/output/zh/1760025489_test_short.md', 'markdown_content': '# 命令列表\n\n| Command Name | NetFn | CMD | Privilege | 备注 |\n| --- | --- | --- | --- | --- |\n| chassis status |  |  | User | 获取当前服务器 (Server) 状态 |\n| chassis restart_cause |  |  | User | 获取服务器 (Server) 系统上次重启原因 |\n| chassis selftest |  |  | User | 获取服务器 (Server) 系统自检结果 |\n| chassis policy always-on/previous/always-off |  |  | operator | 设置服务器 (Server) 系统电源 (Power Supply) 恢复策略为自动开机 / 恢复到断电前状态 / 保持关机状态 |\n| chassis bootdev {device} |  |  | operator | 设置服务器 (Server) 的启动项 |\n| power status |  |  | User | 获取服务器 (Server) 系统电源 (Power Supply) 当前状态 |\n| power on/up |  |  | operator | 设置服务器 (Server) 开机 |\n| power off/down |  |  | operator | 设置服务器 (Server) 关机 |\n| power reset |  |  | operator | 设置服务器 (Server) 重启 |\n| mc info |  |  | User | 获取服务器 (Server) 管理系统各个模块信息 |\n| mc selftest |  |  | User | 获取服务器 (Server) 管理系统自检结果 |\n| mc reset cold |  |  | Admin | 设置服务器 (Server) 管理系统冷重启 |\n| sdr |  |  | User | 获取服务器 (Server) 所有传感器的部分信息 |\n| sensor list |  |  | User | 获取服务器 (Server) 所有传感器的详细参数信息 |\n| sensor get {sensor-name} |  |  | User | 获取服务器 (Server) 指定传感器的详细信息 |\n| sensor thresh {sensor-name} |  |  | Admin | 设置服务器 (Server) 指定传感器的阈值 |\n| sel |  |  | User | 获取系统日志信息 |\n| sel elist |  |  | User | 获取系统详细日志记录 |\n| fru |  |  | User | 获取现场可替换单元信息 |\n| session info active |  |  | User | 获取服务器 (Server) 管理系统当前活跃用户的会话信息 |\n| User list |  |  | User | 获取所有用户信息 |\n| User set name {User id} {Username} |  |  | Admin | 设置服务器 (Server) 管理系统新增用户名 |\n| User set password {User id} {password} |  |  | Admin | 设置服务器 (Server) 管理系统指定用户的密码 |\n| User test {User id} {16 | 20} {password} |  |  | Admin | 验证用户名密码的正确性 |\n| User disable {User id} |  |  | Admin | 关闭指定用户的服务器 (Server) 管理系统的访问权限 |\n| User enable {User id} |  |  | Admin | 开启指定用户的服务器 (Server) 管理系统的访问权限 |\n| User priv {User id} {privilege level} |  |  | Admin | 设置指定用户的服务器 (Server) 管理系统访问权限 |\n\n## 用户管理命令\n\n### 用户信息操作\n\n| 命令 | 描述 | 权限 | 示例 |\n| --- | --- | --- | --- |\n| `User set name {User id} {Username}` | 设置用户名称 | Admin | 设置服务器管理系统新增用户名 |\n| `User set password {User id} {password}` | 设置用户密码 | Admin | 设置服务器管理系统指定用户的密码 |\n| `User test {User id} {16 | 20} {password}` | 验证用户名和密码的正确性 | Admin | 验证用户名密码的正确性 |\n| `User disable {User id}` | 禁用指定用户的服务器管理系统访问权限 | Admin | 关闭指定用户的服务器管理系统访问权限 |\n| `User enable {User id}` | 启用指定用户的服务器管理系统访问权限 | Admin | 开启指定用户的服务器管理系统访问权限 |\n| `User priv {User id} {privilege level}` | 设置指定用户的服务器管理系统访问权限级别 | Admin | 设置指定用户的服务器管理系统访问权限 |\n\n---\n\n## 系统自检命令\n\n### 获取服务器系统自检结果\n\n| 命令描述 | `chassis selftest` 命令用于获取服务器系统自检结果 |\n| --- | --- |\n| 权限 | user |\n| 示例 | ```bash lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis selftest Self Test Results : passed ``` |\n\n---\n\n## 电源恢复策略命令\n\n### 设置服务器系统电源恢复策略\n\n| 命令描述 | `chassis policy` 命令用于设置服务器系统电源恢复策略。支持三种策略：1. `always-on`：当服务器电源接通后系统会自动启动；2. `previous`：当服务器电源接通后系统恢复至断电前的状态；3. `always-off`：当服务器电源接通后系统保持关机状态。 |\n| --- | --- |\n| 权限 | operator |\n| 示例 | ```bash lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis policy state <state>: list : return supported policies ``` |\n\n---\n\n## 注意事项\n\n- 所有命令均需通过 BMC（Baseboard Management Controller）接口执行，确保输入正确的 BMC IP、用户名和密码。\n- 权限管理严格，不同命令需对应不同的用户权限（如 `Admin` 或 `operator`）。\n- 在执行电源恢复策略命令时，需确保服务器处于安全状态，避免因不当操作导致系统异常。\n\n## chassis policy <state> (设置服务器电源恢复策略)\n\n| Command Description | `chassis policy` 命令用于设置服务器 (Server) 系统的电源 (Power Supply) 恢复策略。支持以下三种策略：  \n| 1. **always-on**：当服务器 (Server) 电源 (Power Supply) 接通后，系统会自动启动。  \n| 2. **previous**：当服务器 (Server) 电源 (Power Supply) 接通后，系统恢复至电源 (Power Supply) 拔出前的状态。  \n| 3. **always-off**：当服务器 (Server) 电源 (Power Supply) 接通后，系统保持关机状态。 |\n\n| --- | --- |\n\n| Privilege | operator |\n\n| Command example | `-H [BMC_IP] -U USERID -P PASSW0RD -I lanplus`  \n\n|  | `lenovo:~# ipmitool lanplus chassis policy state <state>`  \n|  | `lenovo:~# ipmitool lanplus chassis policy state list` (返回支持的策略列表) |\n\n---\n\n## chassis bootdev {device} (设置服务器的一次性启动选项)\n\n| Command Description | `chassis bootdev` 命令用于设置服务器 (Server) 系统的一次性启动选项。 |\n\n| --- | --- |\n\n| Privilege | operator |\n\n---\n\n## sol activate (激活 SOL 功能)\n\n| Command Description | `sol activate` 命令用于激活 Serial Over LAN (SOL) 功能。 |\n\n| --- | --- |\n\n| Privilege | administrator |\n\n| Command example | `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate`  \n|  | `usesolkeepalive`  \n|  | `[SOL Session operational. Use ~? for help]` |\n\n---\n\n## sol deactivate (关闭 SOL 功能)\n\n| Command Description | `sol deactivate` 命令用于关闭 Serial Over LAN (SOL) 功能。 |\n\n| --- | --- |\n\n| Privilege | administrator |\n\n| Command example | `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol deactivate` |\n\n---\n\n## Lenovo BMC 支持的 OEM RAW 命令\n\n以下命令是 Lenovo BMC 支持的 OEM RAW 命令。\n\nipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol deactivate` |\n\n## Lenovo BMC 支持的 OEM RAW 命令\n\n### 获取 SNMP Trap 信息 (`Get SNMP Trap Info`)\n\n#### 命令说明\n- **命令格式**: `Get SNMP TRAP INFO` (netfn=`0x30`, cmd=`0x02`)\n- **请求数据结构**\n  | **字段** | **字节数** | **数据说明** |\n  | --- | --- | --- |\n  | Request Data | 1 | user ID（值范围：01h 到 05h） |\n  | Request Data | 2 | parameter（参数定义如下） |\n  |  |  | 01h - enable（启用） |\n  |  |  | 02h - severity（严重性） |\n  |  |  | 03h - version（版本） |\n  |  |  | 04h - mode（模式） |\n  |  |  | 05h - community（社区名称） |\n  |  |  | 06h - user（用户） |\n  |  |  | 07h - user encrypt（用户加密） |\n  |  |  | 08h - password（密码） |\n  |  |  | 09h - pass encrypt（密码加密） |\n  |  |  | 0Ah - destination IP（目标 IP 地址） |\n  |  |  | 0Bh - port（端口） |\n  |  |  | 0Ch - lan channel（LAN 通道） |\n  |  |  | 0Dh - enter ID（进入 ID） |\n\n- **响应数据结构**\n  | **参数** | **字节数** | **数据说明** |\n  | --- | --- | --- |\n  | Response Data for parameter 01h | 1 | Completion code（完成代码） |\n  |  | 2 | 00h - disable（禁用）, 01h - enable（启用） |\n  | Response Data for parameter 02h | 1 | Completion code（完成代码） |\n  |  | 2 | severity（严重性）: 01h - critical（严重），02h - critical and warning（严重和警告），03h - all（所有） |\n  | Response Data for parameter 03h | 1 | Completion code（完成代码） |\n  |  | 2 | version（版本）: 01h - v1, 02h - v2c, 03h - v3 |\n  | Response Data for parameter 04h | 1 | Completion code（完成代码） |\n  |  | 2 | mode（模式） |\n  | Response Data for parameter 05h | 1 | Completion code（完成代码） |\n  |  | 2:17 | community（社区名称） |\n  | Response Data for parameter 06h | 1 | Completion code（完成代码） |\n  |  | 2:17 | user（用户） |\n  | Response Data for parameter 07h | 1 | Completion code（完成代码） |\n  |  | 2 | user encrypt（用户加密）: 00h - user encrypt（加密），01h - user non-encrypt（非加密） |\n  | Response Data for parameter 08h | 1 | Completion code（完成代码） |\n  |  | 2:17 | password（密码） |\n  | Response Data for parameter 09h | 1 | Completion code（完成代码） |\n  |  | 2 | password encrypt（密码加密）: 00h - password encrypt（加密），01h - password non-encrypt（非加密） |\n  | Response Data for parameter 0Ah | 1 | Completion code（完成代码） |\n  |  | 2:33 | destination IP（目标 IP 地址） |\n  | Response Data for parameter 0Bh | 1 | Completion code（完成代码） |\n  |  | 2:3 | port（端口） |\n  | Response Data for parameter 0Ch | 1 | Completion code（完成代码） |\n  |  | 2 | lan channel（LAN 通道） |\n  | Response Data for parameter 0Dh | 1 | Completion code（完成代码） |\n  |  | 2:33 | enter ID（进入 ID） |\n\n#### 命令示例\n```bash\n# ipmitool -H 10.109.107.160 -U USERID -P PASSW0RD\n```\n\nformation Set Command (SET SNMPTRAPINFO)\n| **Command Details** | **netfn** | **cmd** |\n|---------------------|-----------|---------|\n| SET SNMPTRAPINFO    | `0x30`    | `0x03`  |\n\n### Request Data Structure\n| **Data Field** | **Byte** | **Description** |\n|----------------|----------|-----------------|\n| Request Data   | 1        | User ID (Value range: `01h` to `05h`) |\n| Request Data   | 2        | Parameters: <br> `01h` - Enable/Disable <br> `02h` - Severity <br> `03h` - Version <br> `04h` - Mode <br> `05h` - Community <br> `06h` - User <br> `07h` - User Encryption <br> `08h` - Password <br> `09h` - Password Encryption <br> `0Ah` - Destination IP <br> `0Bh` - Port <br> `0Ch` - LAN Channel <br> `0Dh` - Enter ID |\n| Request Data   | 3        | Parameter Values: <br> For `01h`: <br> `00h` - Disable <br> `01h` - Enable <br> For `02h`: <br> `01h` - Critical <br> `02h` - Critical and Warning <br> `03h` - All <br> For `03h`: (To be continued) |\n\n### Response Data Structure\n| **Data Field** | **Byte** | **Description** |\n|----------------|----------|-----------------|\n| Response Data  | 1        | Completion Code |\n| Response Data  | 2:33     | Destination IP  |\n| Response Data  | 2:3      | Port            |\n| Response Data  | 2        | LAN Channel     |\n| Response Data  | 1        | Completion Code |\n| Response Data  | 2:33     | Enter ID        |\n```\n```\n', 'original_config': {'chinese_document': True, 'container_temp_dir': '/opt/***/temp', 'enable_ocr': True, 'extract_images': True, 'extract_tables': True, 'filename': 'test_short.pdf', 'input_dir': '/app/input', 'input_file': '/app/input/test_short.pdf', 'master_run_id': 'manual__2025-10-09T15:58:09.721829+00:00', 'output_target_dir': '/app/output/zh', 'output_zh_dir': '/app/output/zh', 'pipeline_version': '4.0_fixed', 'preserve_structure': True, 'preserve_technical_terms': True, 'processing_stages': 4, 'processing_start_time': '2025-10-09T15:58:10.948233', 'quality_level': 'high', 'quality_target': 100.0, 'stage_mode': 'full_conversion_with_validation', 'target_language': 'original', 'timestamp': 1760025489, 'translation_required': False, 'validation_enabled': True}, 'stage2_completed': True, 'transformation_metadata': {'final_quality_score': 92.8069934864587, 'basic_quality_score': 90.0, 'enhancement_used': True, 'enhancement_quality': 0.7000000000000001, 'vllm_chunks_processed': 5, 'chinese_chars_preserved': 1172, 'technical_terms_preserved': 34, 'total_processing_time': 0.03288388252258301, 'completion_time': '2025-10-09T16:00:36.147018'}}
[2025-10-09T16:00:36.169+0000] {taskinstance.py:1138} INFO - Marking task as SUCCESS. dag_id=content_transformation, task_id=save_transformed_content, execution_date=20251009T155846, start_date=20251009T160035, end_date=20251009T160036
[2025-10-09T16:00:36.187+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2025-10-09T16:00:36.206+0000] {taskinstance.py:3280} INFO - 1 downstream tasks scheduled from follow-on schedule check
