[2025-10-13T15:02:41.746+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: quality_assurance.perform_auto_correction manual__2025-10-13T15:02:35.537675+00:00 [queued]>
[2025-10-13T15:02:41.752+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: quality_assurance.perform_auto_correction manual__2025-10-13T15:02:35.537675+00:00 [queued]>
[2025-10-13T15:02:41.752+0000] {taskinstance.py:2170} INFO - Starting attempt 1 of 4
[2025-10-13T15:02:41.760+0000] {taskinstance.py:2191} INFO - Executing <Task(PythonOperator): perform_auto_correction> on 2025-10-13 15:02:35.537675+00:00
[2025-10-13T15:02:41.766+0000] {standard_task_runner.py:60} INFO - Started process 300 to run task
[2025-10-13T15:02:41.768+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'quality_assurance', 'perform_auto_correction', 'manual__2025-10-13T15:02:35.537675+00:00', '--job-id', '1335', '--raw', '--subdir', 'DAGS_FOLDER/quality_assurance.py', '--cfg-path', '/tmp/tmp8ql0ap_z']
[2025-10-13T15:02:41.770+0000] {standard_task_runner.py:88} INFO - Job 1335: Subtask perform_auto_correction
[2025-10-13T15:02:41.810+0000] {task_command.py:423} INFO - Running <TaskInstance: quality_assurance.perform_auto_correction manual__2025-10-13T15:02:35.537675+00:00 [running]> on host 0bf6e5e06c77
[2025-10-13T15:02:42.006+0000] {taskinstance.py:2480} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='pdf-converter' AIRFLOW_CTX_DAG_ID='quality_assurance' AIRFLOW_CTX_TASK_ID='perform_auto_correction' AIRFLOW_CTX_EXECUTION_DATE='2025-10-13T15:02:35.537675+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-10-13T15:02:35.537675+00:00'
[2025-10-13T15:02:42.026+0000] {quality_assurance.py:1695} INFO - 🔍 Уровень 5: Auto-Correction через vLLM
[2025-10-13T15:02:42.026+0000] {quality_assurance.py:1793} INFO - Applying vLLM corrections
[2025-10-13T15:02:42.026+0000] {quality_assurance.py:1825} INFO - vLLM API request attempt 1/5 for auto-correction
[2025-10-13T15:02:42.029+0000] {quality_assurance.py:1869} ERROR - vLLM API error 401: {"error":"Unauthorized"}
[2025-10-13T15:02:42.030+0000] {quality_assurance.py:1876} INFO - Intermediate status: retrying vLLM request after 5.5s due to client error
[2025-10-13T15:02:47.523+0000] {quality_assurance.py:1825} INFO - vLLM API request attempt 2/5 for auto-correction
[2025-10-13T15:02:47.526+0000] {quality_assurance.py:1869} ERROR - vLLM API error 401: {"error":"Unauthorized"}
[2025-10-13T15:02:47.527+0000] {quality_assurance.py:1876} INFO - Intermediate status: retrying vLLM request after 8.6s due to client error
[2025-10-13T15:02:56.124+0000] {quality_assurance.py:1825} INFO - vLLM API request attempt 3/5 for auto-correction
[2025-10-13T15:02:56.127+0000] {quality_assurance.py:1869} ERROR - vLLM API error 401: {"error":"Unauthorized"}
[2025-10-13T15:02:56.127+0000] {quality_assurance.py:1876} INFO - Intermediate status: retrying vLLM request after 21.2s due to client error
[2025-10-13T15:03:17.334+0000] {quality_assurance.py:1825} INFO - vLLM API request attempt 4/5 for auto-correction
[2025-10-13T15:03:17.337+0000] {quality_assurance.py:1869} ERROR - vLLM API error 401: {"error":"Unauthorized"}
[2025-10-13T15:03:17.337+0000] {quality_assurance.py:1876} INFO - Intermediate status: retrying vLLM request after 52.7s due to client error
[2025-10-13T15:04:10.056+0000] {quality_assurance.py:1825} INFO - vLLM API request attempt 5/5 for auto-correction
[2025-10-13T15:04:10.059+0000] {quality_assurance.py:1869} ERROR - vLLM API error 401: {"error":"Unauthorized"}
[2025-10-13T15:04:10.059+0000] {quality_assurance.py:1756} INFO - Intermediate status: auto-correction requires manual follow-up (status needs_review)
[2025-10-13T15:04:10.059+0000] {quality_assurance.py:1768} INFO - Уровень 5 завершен со статусом needs_review: 0 исправлений, частичный успех=False
[2025-10-13T15:04:10.059+0000] {python.py:201} INFO - Done. Returned value was: {'level': 5, 'name': 'auto_correction', 'corrections_applied': 0, 'correction_confidence': 0.0, 'corrected_content': '# upload_1760367627_test_short\n\n## 命令列表\n\n| Command Name | NetFn | CMD | Privilege | 备注 |  |\n\n| --- | --- | --- | --- | --- | --- |\n\n| chassis status |  |  | User | 获取当前服务器 (Server)状态 |  |\n\n| chassis restart_cause |  |  | User | 获取服务器 (Server)系统上次重启原因 |  |\n\n| chassis selftest |  |  | User | 获取服务器 (Server)系统自检结果 |  |\n\n| chassis policy always- on/previous/always-off |  |  | operator | 设置服务器 (Server)系统电源 (Power Supply)恢复策略为自动开机 / 恢复到断电前状态 / 保持关机状态 |  |\n\n| chassis bootdev {device} |  |  | operator | 设置服务器 (Server)的启动项 |  |\n\n| power status |  |  | User | 获取服务器 (Server)系统电源 (Power Supply)当前状态 |  |\n\n| power on/up |  |  | operator | 设置服务器 (Server)开机 |  |\n\n| power off/down |  |  | operator | 设置服务器 (Server)关机 |  |\n\n| power reset |  |  | operator | 设置服务器 (Server)重启 |  |\n\n| mc info |  |  | User | 获取服务器 (Server)管理系统各个模块信息 |  |\n\n| mc selftest |  |  | User | 获取服务器 (Server)管理系统自检结果 |  |\n\n| mc reset cold |  |  | Admin | 设置服务器 (Server)管理系统冷重启 |  |\n\n| sdr |  |  | User | 获取服务器 (Server)所有传感器的部分信息 |  |\n\n| sensor list |  |  | User | 获取服务器 (Server)所有传感器的详细参数信息 |  |\n\n| sensor get {sensor-name} |  |  | User | 获取服务器 (Server)指定传感器的详细信息 |  |\n\n| sensor thresh {sensor- name} |  |  | Admin | 设置服务器 (Server)指定传感器的阈值 |  |\n\n| sel |  |  | User | 获取系统日志信息 |  |\n\n| sel elist |  |  | User | 获取系统详细日志记录 |  |\n\n| fru |  |  | User | 获取现场可替换单元信息 |  |\n\n| session info active |  |  | User | 获取服务器 (Server)管理系统当前活跃用户的会话信息 |  |\n\n| User list |  |  | User | 获取所有用户信息 |  |\n\n| User set name {User id} {Username} |  |  | Admin | 设置服务器 (Server)管理系统新增用户名 |  |\n\n| User set password {User id} {password} |  |  | Admin | 设置服务器 (Server)管理系统指定用户的密码 |  |\n\n| User test {User id} {16 | 20} {password} |  |  | Admin | 验证用户名密码的正确性 |\n\n| User disable {User id} |  |  | Admin | 关闭指定用户的服务器 (Server)管理系统的访问权限 |  |\n\n| User enable {User id} |  |  | Admin | 开启指定用户的服务器 (Server)管理系统的访问权限 |  |\n\n| User priv {User id} {privilege level} |  |  | Admin | 设置指定用户的服务器 (Server)管理系统访问权限 |  |\n\n## chassis selftest （获取服务器 (Server)系统自检结果）\n\n| Command Description | chassis selftest 命令用来获取服务器 (Server)系统自检结果 |\n\n| --- | --- |\n\n| Privilege | user |\n\n| Command example | lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis selftest Self Test Results : passed |\n\nchassis policy always-on/previous/always-off （设置服务器 (Server)系统电源 (Power Supply)恢复策略为自动开机 / 恢复到断电前状态 / 保持关机状态）\n\n| Command Description | chassis policy 命令用来设置服务器 (Server)系统电源 (Power Supply)恢复策略。 支持三种策略： 1. always-on 当服务器 (Server)电源 (Power Supply)接通后系统会自动启动 2. previous 当服务器 (Server)电源 (Power Supply)接通后系统恢复电源 (Power Supply)拔出前的状态 3. always-off 当服务器 (Server)电源 (Power Supply)接通后系统保持关机状态 |\n\n| --- | --- |\n\n| Privilege | operator |\n\n| Command example | -H [BMC_IP] -U USERID -P PASSW0RD -I |\n\n|  | lenovo:~# ipmitool lanplus chassis policy state <state>: list : return supported policies |\n\n## chassis bootdev {device} （设置服务器 (Server)的启动项）\n\n| Command Description | chassis bootdev 命令用来设置服务器 (Server)系统一次性启动选项 |\n\n| --- | --- |\n\n| Privilege | operator |\n\n## sol activate （激活 SOL 功能）\n\n| Command Description | sol activate 命令用来激活 SOL ， |\n\n| --- | --- |\n\n| Privilege | administrator |\n\n| Command example | lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate usesolkeepalive [SOL Session operational. Use ~? for help] |\n\n## sol deactivate （关闭 SOL 功能）\n\n| Command Description | sol deactivate |\n\n| --- | --- |\n\n| Privilege | administrator |\n\n| Command example | lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol deactivate |\n\n下列命令是 Lenovo BMC 支持的 OEM RAW 命令。\n\n## Get SNMP Trap Info （获取 SNMP trap 信息）\n\n| Get SNMP TRAP INFO （ netfn=`0x30` ， cmd=`0x02` ） | Get SNMP TRAP INFO （ netfn=`0x30` ， cmd=`0x02` ） | Get SNMP TRAP INFO （ netfn=`0x30` ， cmd=`0x02` ） |\n\n| --- | --- | --- |\n\n|  | byte | data field |\n\n| Request Data | 1 | user ID this value is from 01h to 05h. |\n\n| Request Data | 2 | parameter 01h - enable 02h - severity 03h - version 04h - mode 05h - community 06h - user 07h - user encrypt 08h - password 09h - pass encrypt 0Ah - distination IP 0Bh - port |\n\n|  |  | 0Ch - lan channel 0Dh - enter ID |\n\n| --- | --- | --- |\n\n| Response Data for parameter 01h | 1 | Completion code |\n\n| Response Data for parameter 01h | 2 | 00h - disable 01h - enable |\n\n|  | 1 | Completion code |\n\n| Response Data for parameter 02h | 2 | severity 01h - critical 02h - critical and warning 03h - all |\n\n| Response Data | 1 | Completion code |\n\n| for parameter 03h | 2 | version 01h - v1 02h - v2c 03h - v3 |\n\n| Response Data | 1 | Completion code |\n\n| for parameter 04h | 2 | mode |\n\n| Response Data | 1 | Completion code |\n\n| for parameter 05h | 2:17 | community |\n\n| Response Data | 1 | Completion code |\n\n| for parameter 06h | 2:17 | user |\n\n| Response Data | 1 | Completion code |\n\n| for parameter 07h | 2 | user encrypt 00h - user encrypt 01h - user non-encrypt |\n\n| Response Data | 1 | Completion code |\n\n| for parameter 08h | 2:17 | password |\n\n| Response Data | 1 | Completion code |\n\n| for parameter 09h | 2 | password encrypt 00h - password encrypt 01h - password non-encrypt |\n\n| Response Data | 1 | Completion code |\n\n| for parameter 0Ah | 2:33 | deatination IP |\n\n| Response Data | 1 | Completion code |\n\n| for parameter 0Bh | 2:3 | port |\n\n| for parameter 0Ch | 2 | lan channel |\n\n| --- | --- | --- |\n\n| Response Data for parameter | 1 | Completion code |\n\n| 0Dh | 2:33 | enter ID |\n\n| Command example ： # ipmitool -H `10.109.107.160` -U USERID -P PASSW0RD | Command example ： # ipmitool -H `10.109.107.160` -U USERID -P PASSW0RD | Command example ： # ipmitool -H `10.109.107.160` -U USERID -P PASSW0RD |\n\n## Set SNMP Trap Info （设置 SNMP trap 信息）\n\n| SET SNMPTRAPINFO （ netfn=`0x30` ， cmd=`0x03` ） | SET SNMPTRAPINFO （ netfn=`0x30` ， cmd=`0x03` ） | SET SNMPTRAPINFO （ netfn=`0x30` ， cmd=`0x03` ） |\n\n| --- | --- | --- |\n\n|  | byte | data field |\n\n| Request Data | 1 | user ID this value is from 01h to 05h. |\n\n| Request Data | 2 | parameter 01h - enable 02h - severity 03h - version 04h - mode 05h - community 06h - user 07h - user encrypt 08h - password 09h - pass encrypt 0Ah - distination IP 0Bh - port 0Ch - lan channel 0Dh - enter ID |\n\n| Request Data | 3 | below value for parameter 01h : 00h - disable 01h - enable below value for parameter 02h : 01h - critical 02h - critical and warning 03h - all below value for parameter 03h : |\n\n## chassis selftest （获取服务器系统自检结果）\n\n## chassis bootdev {device} （设置服务器的启动项）', 'validation_score': 0.0, 'issues_found': ['vLLM correction confidence too low: 0.000'], 'processing_time': 88.05220055580139, 'timed_out': False, 'warmup_requested': False, 'retry_scheduled': False, 'status': 'needs_review', 'partial_success': False, 'requires_manual_followup': True}
[2025-10-13T15:04:10.083+0000] {taskinstance.py:1138} INFO - Marking task as SUCCESS. dag_id=quality_assurance, task_id=perform_auto_correction, execution_date=20251013T150235, start_date=20251013T150241, end_date=20251013T150410
[2025-10-13T15:04:10.139+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2025-10-13T15:04:10.297+0000] {taskinstance.py:3280} INFO - 0 downstream tasks scheduled from follow-on schedule check
