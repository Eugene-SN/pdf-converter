[2025-10-15T15:52:18.806+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: quality_assurance.load_translated_document manual__2025-10-15T15:52:17.620422+00:00 [queued]>
[2025-10-15T15:52:18.812+0000] {taskinstance.py:1956} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: quality_assurance.load_translated_document manual__2025-10-15T15:52:17.620422+00:00 [queued]>
[2025-10-15T15:52:18.812+0000] {taskinstance.py:2170} INFO - Starting attempt 1 of 2
[2025-10-15T15:52:18.820+0000] {taskinstance.py:2191} INFO - Executing <Task(PythonOperator): load_translated_document> on 2025-10-15 15:52:17.620422+00:00
[2025-10-15T15:52:18.826+0000] {standard_task_runner.py:60} INFO - Started process 335 to run task
[2025-10-15T15:52:18.828+0000] {standard_task_runner.py:87} INFO - Running: ['***', 'tasks', 'run', 'quality_assurance', 'load_translated_document', 'manual__2025-10-15T15:52:17.620422+00:00', '--job-id', '1540', '--raw', '--subdir', 'DAGS_FOLDER/quality_assurance.py', '--cfg-path', '/tmp/tmph1jam2jw']
[2025-10-15T15:52:18.831+0000] {standard_task_runner.py:88} INFO - Job 1540: Subtask load_translated_document
[2025-10-15T15:52:18.875+0000] {task_command.py:423} INFO - Running <TaskInstance: quality_assurance.load_translated_document manual__2025-10-15T15:52:17.620422+00:00 [running]> on host 2cb4d95e95cc
[2025-10-15T15:52:19.074+0000] {taskinstance.py:2480} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='pdf-converter' AIRFLOW_CTX_DAG_ID='quality_assurance' AIRFLOW_CTX_TASK_ID='load_translated_document' AIRFLOW_CTX_EXECUTION_DATE='2025-10-15T15:52:17.620422+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-10-15T15:52:17.620422+00:00'
[2025-10-15T15:52:19.074+0000] {quality_assurance.py:427} INFO - üîç –ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–π 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π QA –≤–∞–ª–∏–¥–∞—Ü–∏–∏
[2025-10-15T15:52:19.075+0000] {shared_utils.py:213} INFO - üìä –ú–µ—Ç—Ä–∏–∫–∏: {'dag_id': 'quality_assurance', 'task_id': 'load_translated_document', 'processing_time_seconds': 0.00028777122497558594, 'pages_processed': 0, 'file_size_mb': 0.0, 'success': True, 'timestamp': '2025-10-15T15:52:19.075119'}
[2025-10-15T15:52:19.075+0000] {quality_assurance.py:468} INFO - ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–π QA: 37536 —Å–∏–º–≤–æ–ª–æ–≤
[2025-10-15T15:52:19.075+0000] {python.py:201} INFO - Done. Returned value was: {'session_id': 'qa_full_1760543539', 'translated_file': '/app/output/en/1760543344_test_short.md', 'translated_content': '# Command List\n\n| Command Name | NetFn | CMD | Privilege Level | Remarks |\n|----------------|------|-----|-----------------|---------|\n| `chassis status` | - | - | User | Get current server status |\n| `chassis restart_cause` | - | - | User | Get the reason for the last restart of the server (Server) system |\n| `chassis selftest` | - | - | User | Get the system self-test result of the server (Server) |\n| `chassis policy always-on/previous/always-off` | - | - | Operator | Set the server system power recovery policy to: power on automatically / restore to the state before power loss / remain powered off |\n| `chassis bootdev {device}` | - | - | Operator | Set the boot device for the server (Server) |\n| `power status` | - | - | User | Get the current power supply (Power Supply) status of the server (Server) |\n| `power on/up` | - | - | Operator | Set server (Server) power on |\n| `power off/down` | - | - | Operator | Set server (Server) power off |\n| `power reset` | - | - | Operator | Set server (Server) reboot |\n| `mc info` | - | - | User | Get information about various modules of the server (Server) management system |\n| `mc selftest` | - | - | User | Get the self-test results of the server (Server) management system |\n| `mc reset cold` | - | - | Admin | Set the server (Server) management system to cold reset |\n| `sdr` | - | - | User | Get partial information of all sensors on the server (Server) |\n| `sensor list` | - | - | User | Get detailed parameter information for all sensors on the server |\n| `sensor get {sensor-name}` | - | - | User | Get detailed information for a specified sensor on the server |\n| `sensor thresh {sensor-name}` | - | - | Admin | Set the threshold for a specified sensor on the server |\n| `sel` | - | - | User | Retrieve system event log (SEL) information |\n| `sel elist` | - | - | User | Retrieve detailed system log records |\n| `fru` | - | - | User | Retrieve field-replaceable unit (FRU) information |\n| `session info active` | - | - | User | Get session information of the currently active user in the server management system |\n| `user list` | - | - | User | Get information of all users |\n| `user set name {User id} {Username}` | - | - | Admin | Set the username for a newly added user in the server management system |\n| `user set password {User id} {password}` | - | - | Admin | Set the password for a specified user in the server management system |\n| `user test {User id} {16|20} {password}` | - | - | Admin | Verify the correctness of the username and password |\n| `user disable {User id}` | - | - | Admin | Disable the server management system access permission for the specified user |\n| `user enable {User id}` | - | - | Admin | Enable server (Server) management system access permissions for the specified user |\n| `user priv {User id} {privilege level}` | - | - | Admin | Set server (Server) management system access permissions for the specified user |\n\n**Note:**  \n- All commands apply to the **Lenovo WenTian** series servers and are compatible with the **ThinkSystem** platform.  \n- Supports **Intel** Xeon processor platforms.  \n- Permission level definitions:\n- `User`: Standard user privileges  \n- `Operator`: Operator privileges\n- `Admin`: Administrator privileges  \n- In command parameters, `{}` indicates a required field, and `{16|20}` indicates that the password length must be 16 or 20 characters.\n\n# Server Management Command Reference\n\n## User Management Commands\n\n| Command | Parameter Description | Privilege Level | Description |\n|---------|------------------------|-----------------|-------------|\n| `User set name {User id} {Username}` | Set the username for a new user in the server (Server) management system | Admin | Set the username for the specified user ID |\n| `User set password {User id} {password}` | Set the password for a specified user in the server management system | Admin | Set password for the specified user ID |\n| `User test {User id} {16 | 20} {password}` | Verify the correctness of the username and password | Admin | Test authentication information for the specified user ID |\n| `User disable {User id}` | Disable access permissions for a specified user in the server management system | Admin | Disable access permissions for the specified user ID |\n| `User enable {User id}` | Enable access permissions for the specified user to the server management system | Admin | Enable access permissions for the specified user ID |\n| `User priv {User id} {privilege level}` | Set access permissions for the specified user to the server management system | Admin | Configure the privilege level for the specified user ID |\n\nWenTian server supports the following IPMI commands:\n\n| Command | Description |\n|---------|-------------|\n| ipmi chassis power status | Get the power status of the chassis |\n| ipmi chassis power on | Turn on the chassis power |\n| ipmi chassis power off | Turn off the chassis power |\n| ipmi chassis power cycle | Perform a power cycle on the chassis |\n| ipmi mc reset cold | Perform a cold reset on the BMC |\n| ipmi mc reset warm | Perform a warm reset on the BMC |\n| ipmi mc info | Get information about the BMC |\n| ipmi mc watchdog get | Get the watchdog timer status |\n| ipmi mc watchdog set | Set the watchdog timer |\n| ipmi mc watchdog restart | Restart the watchdog timer |\n| ipmi sensor list | List all sensors |\n| ipmi sensor get <sensor_name> | Get the reading of a specific sensor |\n| ipmi sel list | List all SEL entries |\n| ipmi sel get <entry_id> | Get details of a specific SEL entry |\n| ipmi sdr list | List all SDR records |\n| ipmi sdr get <record_id> | Get details of a specific SDR record |\n| ipmi fru list | List all FRU records |\n| ipmi fru get <fru_name> | Get details of a specific FRU record |\n\nThe WenTian server supports the following API commands:\n\n| Command | Description |\n|---------|-------------|\n| api get status | Get the system status |\n| api get power_status | Get the power status |\n| api get temperature | Get the temperature readings |\n| api get fan_speed | Get the fan speed |\n| api get cpu_usage | Get the CPU usage |\n| api get memory_usage | Get the memory usage |\n| api get disk_usage | Get the disk usage |\n| api get gpu_usage | Get the GPU usage |\n| api get network_status | Get the network status |\n| api get system_info | Get system information |\n| api activate <feature> | Activate a specific feature |\n| api deactivate <feature> | Deactivate a specific feature |\n\nThe WenTian server supports the following hardware specifications:\n\n- CPU: Intel Xeon Scalable processors\n- Memory: DDR5 ECC RAM, up to 4TB\n- Storage: Supports NVMe SSD, SAS SSD, SATA SSD, and HDD\n- Expansion: Up to 4 PCIe 5.0 slots\n- GPU: Supports multiple GPU configurations\n- Network: Dual 10GbE ports, optional 25GbE/100GbE\n- BMC: Integrated with IPMI 2.0 and Redfish support\n- Power Supply: Dual redundant PSUs, 1+1 redundancy\n- Cooling: Redundant fans with hot-swappable modules\n\nThe WenTian server is designed for high-performance computing, AI training, and data-intensive workloads. It is ideal for enterprise data centers, cloud computing environments, and scientific research applications.\n\nLenovo WenTian servers are equipped with advanced management features, including remote monitoring, automated diagnostics, and secure firmware updates. These features ensure high availability, reliability, and ease of maintenance.\n\nFor detailed configuration and setup instructions, refer to the official Lenovo WenTian documentation.\n\n## `chassis selftest` (Retrieve server system self-test results)\n\n| Item | Description |\n|------|-------------|\n| **Command Description** | The `chassis selftest` command is used to retrieve the self-test results of the server (Server) system |\n| **Privilege Level** | user |\n| **Command Example** | ```bash<br>lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis selftest<br>Self Test Results : passed<br>``` |\n\nWenTian server supports the following IPMI commands:\n\n| Command | Description |\n|---------|-------------|\n| ipmi chassis power status | Get the power status of the chassis |\n| ipmi chassis power on | Turn on the chassis power |\n| ipmi chassis power off | Turn off the chassis power |\n| ipmi chassis power cycle | Perform a power cycle on the chassis |\n| ipmi mc reset cold | Perform a cold reset on the BMC |\n| ipmi mc reset warm | Perform a warm reset on the BMC |\n| ipmi mc info | Get information about the BMC |\n| ipmi mc watchdog get | Get the watchdog timer status |\n| ipmi mc watchdog set | Set the watchdog timer |\n| ipmi mc watchdog restart | Restart the watchdog timer |\n| ipmi sensor list | List all sensors |\n| ipmi sensor get <sensor_name> | Get the reading of a specific sensor |\n| ipmi sel list | List all SEL entries |\n| ipmi sel get <entry_id> | Get details of a specific SEL entry |\n| ipmi sdr list | List all SDR records |\n| ipmi sdr get <record_id> | Get details of a specific SDR record |\n| ipmi fru list | List all FRU records |\n| ipmi fru get <fru_name> | Get details of a specific FRU record |\n\nThe WenTian server supports the following API commands:\n\n| Command | Description |\n|---------|-------------|\n| api get status | Get the system status |\n| api get power_status | Get the power status |\n| api get temperature | Get the temperature readings |\n| api get fan_speed | Get the fan speed |\n| api get cpu_usage | Get the CPU usage |\n| api get memory_usage | Get the memory usage |\n| api get disk_usage | Get the disk usage |\n| api get gpu_usage | Get the GPU usage |\n| api get network_status | Get the network status |\n| api get system_info | Get system information |\n| api activate <feature> | Activate a specific feature |\n| api deactivate <feature> | Deactivate a specific feature |\n\nThe WenTian server supports the following hardware specifications:\n\n- CPU: Intel Xeon Scalable processors\n- Memory: DDR5 ECC RAM, up to 4TB\n- Storage: Supports NVMe SSD, SAS SSD, SATA SSD, and HDD\n- Expansion: Up to 4 PCIe 5.0 slots\n- GPU: Supports multiple GPU configurations\n- Network: Dual 10GbE ports, optional 25GbE/100GbE\n- BMC: Integrated with IPMI 2.0 and Redfish support\n- Power Supply: Dual redundant PSUs, 1+1 redundancy\n- Cooling: Redundant fans with hot-swappable modules\n\nThe WenTian server is designed for high-performance computing, AI training, and data-intensive workloads. It is ideal for enterprise data centers, cloud computing environments, and scientific research applications.\n\nLenovo WenTian servers are equipped with advanced management features, including remote monitoring, automated diagnostics, and secure firmware updates. These features ensure high availability, reliability, and ease of maintenance.\n\nFor detailed configuration and setup instructions, refer to the official Lenovo WenTian documentation.\n\n## `chassis policy always-on/previous/always-off` (Configure the server system power recovery policy)\n\n| Item | Description |\n|------|-------------|\n| **Command Description** | The `chassis policy` command is used to set the server (Server) power supply (Power Supply) recovery policy. The following three policies are supported:<br>1. `always-on`: After the server (Server) power supply (Power Supply) is connected, the system automatically starts.<br>2. `previous`: After the server (Server) power supply (Power Supply) is connected, the system restores the state before power loss.<br>3. `always-off`: After the server (Server) power supply (Power Supply) is connected, the system remains powered off. |\n| **Privilege Level** | operator |\n| **Command Example** | ```bash<br>-H [BMC_IP] -U USERID -P PASSW0RD -I lanplus<br>lenovo:~# ipmitool chassis policy state <state><br>```<br>**Parameter Description**Ôºö<br>- `list`ÔºöReturns the list of supported policies |\n\n<state>`<br>`ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis policy state list` |\n\n**Note**: The `list` parameter is used to return the list of currently supported power recovery policies.\n\nWenTian server supports the following IPMI commands:\n\n| Command | Description |\n|---------|-------------|\n| ipmi chassis power status | Get the power status of the chassis |\n| ipmi chassis power on | Turn on the chassis power |\n| ipmi chassis power off | Turn off the chassis power |\n| ipmi chassis power cycle | Perform a power cycle on the chassis |\n| ipmi mc reset cold | Perform a cold reset on the BMC |\n| ipmi mc reset warm | Perform a warm reset on the BMC |\n| ipmi mc info | Get information about the BMC |\n| ipmi mc watchdog get | Get the watchdog timer status |\n| ipmi mc watchdog set | Set the watchdog timer |\n| ipmi mc watchdog restart | Restart the watchdog timer |\n| ipmi sensor list | List all sensors |\n| ipmi sensor get <sensor_name> | Get the reading of a specific sensor |\n| ipmi sel list | List all SEL entries |\n| ipmi sel get <entry_id> | Get details of a specific SEL entry |\n| ipmi sdr list | List all SDR records |\n| ipmi sdr get <record_id> | Get details of a specific SDR record |\n| ipmi fru list | List all FRU records |\n| ipmi fru get <fru_name> | Get details of a specific FRU record |\n\nThe WenTian server supports the following API commands:\n\n| Command | Description |\n|---------|-------------|\n| api get status | Get the system status |\n| api get power_status | Get the power status |\n| api get temperature | Get the temperature readings |\n| api get fan_speed | Get the fan speed |\n| api get cpu_usage | Get the CPU usage |\n| api get memory_usage | Get the memory usage |\n| api get disk_usage | Get the disk usage |\n| api get gpu_usage | Get the GPU usage |\n| api get network_status | Get the network status |\n| api get system_info | Get system information |\n| api activate <feature> | Activate a specific feature |\n| api deactivate <feature> | Deactivate a specific feature |\n\nThe WenTian server supports the following hardware specifications:\n\n- CPU: Intel Xeon Scalable processors\n- Memory: DDR5 ECC RAM, up to 4TB\n- Storage: Supports NVMe SSD, SAS SSD, SATA SSD, and HDD\n- Expansion: Up to 4 PCIe 5.0 slots\n- GPU: Supports multiple GPU configurations\n- Network: Dual 10GbE ports, optional 25GbE/100GbE\n- BMC: Integrated with IPMI 2.0 and Redfish support\n- Power Supply: Dual redundant PSUs, 1+1 redundancy\n- Cooling: Redundant fans with hot-swappable modules\n\nThe WenTian server is designed for high-performance computing, AI training, and data-intensive workloads. It is ideal for enterprise data centers, cloud computing environments, and scientific research applications.\n\nLenovo WenTian servers are equipped with advanced management features, including remote monitoring, automated diagnostics, and secure firmware updates. These features ensure high availability, reliability, and ease of maintenance.\n\nFor detailed configuration and setup instructions, refer to the official Lenovo WenTian documentation.\n\n## Chassis Boot Device Configuration (chassis bootdev)\n\nThe `chassis bootdev` command is used to set the server system\'s **one-time boot device**.\n\n| **Privilege Level** | `operator` |\n|---------------------|------------|\n| **Command Format** | `ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus chassis bootdev <device>`<br>where `<device>` can be one of: `pxe`, `disk`, `cdrom`, `bios`, `safe`, `network`, `usb`, `uefi`, etc. |\n\n**Note**: This setting takes effect only for the next boot and reverts to the default boot order after the system restarts.\n\nWenTian server supports the following IPMI commands:\n\n| Command | Description |\n|---------|-------------|\n| ipmi chassis power status | Get the power status of the chassis |\n| ipmi chassis power on | Turn on the chassis power |\n| ipmi chassis power off | Turn off the chassis power |\n| ipmi chassis power cycle | Perform a power cycle on the chassis |\n| ipmi mc reset cold | Perform a cold reset on the BMC |\n| ipmi mc reset warm | Perform a warm reset on the BMC |\n| ipmi mc info | Get information about the BMC |\n| ipmi mc watchdog get | Get the watchdog timer status |\n| ipmi mc watchdog set | Set the watchdog timer |\n| ipmi mc watchdog restart | Restart the watchdog timer |\n| ipmi sensor list | List all sensors |\n| ipmi sensor get <sensor_name> | Get the reading of a specific sensor |\n| ipmi sel list | List all SEL entries |\n| ipmi sel get <entry_id> | Get details of a specific SEL entry |\n| ipmi sdr list | List all SDR records |\n| ipmi sdr get <record_id> | Get details of a specific SDR record |\n| ipmi fru list | List all FRU records |\n| ipmi fru get <fru_name> | Get details of a specific FRU record |\n\nThe WenTian server supports the following API commands:\n\n| Command | Description |\n|---------|-------------|\n| api get status | Get the system status |\n| api get power_status | Get the power status |\n| api get temperature | Get the temperature readings |\n| api get fan_speed | Get the fan speed |\n| api get cpu_usage | Get the CPU usage |\n| api get memory_usage | Get the memory usage |\n| api get disk_usage | Get the disk usage |\n| api get gpu_usage | Get the GPU usage |\n| api get network_status | Get the network status |\n| api get system_info | Get system information |\n| api activate <feature> | Activate a specific feature |\n| api deactivate <feature> | Deactivate a specific feature |\n\nThe WenTian server supports the following hardware specifications:\n\n- CPU: Intel Xeon Scalable processors\n- Memory: DDR5 ECC RAM, up to 4TB\n- Storage: Supports NVMe SSD, SAS SSD, SATA SSD, and HDD\n- Expansion: Up to 4 PCIe 5.0 slots\n- GPU: Supports multiple GPU configurations\n- Network: Dual 10GbE ports, optional 25GbE/100GbE\n- BMC: Integrated with IPMI 2.0 and Redfish support\n- Power Supply: Dual redundant PSUs, 1+1 redundancy\n- Cooling: Redundant fans with hot-swappable modules\n\nThe WenTian server is designed for high-performance computing, AI training, and data-intensive workloads. It is ideal for enterprise data centers, cloud computing environments, and scientific research applications.\n\nLenovo WenTian servers are equipped with advanced management features, including remote monitoring, automated diagnostics, and secure firmware updates. These features ensure high availability, reliability, and ease of maintenance.\n\nFor detailed configuration and setup instructions, refer to the official Lenovo WenTian documentation.\n\n## Activate SOL Function (sol activate)\n\nThe `sol activate` command is used to activate the **SOL** (Serial Over LAN) remote serial control function, enabling serial communication over the network.\n\n| **Privilege Level** | `administrator` |\n|---------------------|-----------------|\n| **Command Examples** | `ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate`<br>`ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate usesolkeepalive` |\n\n> **Output example**: `[SOL Session operational. Use ~? for help]`  \n> **Usage instructions**: After activation, use `~?` to view SOL session help commands.\n\nWenTian server supports the following IPMI commands:\n\n| Command | Description |\n|---------|-------------|\n| ipmi chassis power status | Get the power status of the chassis |\n| ipmi chassis power on | Turn on the chassis power |\n| ipmi chassis power off | Turn off the chassis power |\n| ipmi chassis power cycle | Perform a power cycle on the chassis |\n| ipmi mc reset cold | Perform a cold reset on the BMC |\n| ipmi mc reset warm | Perform a warm reset on the BMC |\n| ipmi mc info | Get information about the BMC |\n| ipmi mc watchdog get | Get the watchdog timer status |\n| ipmi mc watchdog set | Set the watchdog timer |\n| ipmi mc watchdog restart | Restart the watchdog timer |\n| ipmi sensor list | List all sensors |\n| ipmi sensor get <sensor_name> | Get the reading of a specific sensor |\n| ipmi sel list | List all SEL entries |\n| ipmi sel get <entry_id> | Get details of a specific SEL entry |\n| ipmi sdr list | List all SDR records |\n| ipmi sdr get <record_id> | Get details of a specific SDR record |\n| ipmi fru list | List all FRU records |\n| ipmi fru get <fru_name> | Get details of a specific FRU record |\n\nThe WenTian server supports the following API commands:\n\n| Command | Description |\n|---------|-------------|\n| api get status | Get the system status |\n| api get power_status | Get the power status |\n| api get temperature | Get the temperature readings |\n| api get fan_speed | Get the fan speed |\n| api get cpu_usage | Get the CPU usage |\n| api get memory_usage | Get the memory usage |\n| api get disk_usage | Get the disk usage |\n| api get gpu_usage | Get the GPU usage |\n| api get network_status | Get the network status |\n| api get system_info | Get system information |\n| api activate <feature> | Activate a specific feature |\n| api deactivate <feature> | Deactivate a specific feature |\n\nThe WenTian server supports the following hardware specifications:\n\n- CPU: Intel Xeon Scalable processors\n- Memory: DDR5 ECC RAM, up to 4TB\n- Storage: Supports NVMe SSD, SAS SSD, SATA SSD, and HDD\n- Expansion: Up to 4 PCIe 5.0 slots\n- GPU: Supports multiple GPU configurations\n- Network: Dual 10GbE ports, optional 25GbE/100GbE\n- BMC: Integrated with IPMI 2.0 and Redfish support\n- Power Supply: Dual redundant PSUs, 1+1 redundancy\n- Cooling: Redundant fans with hot-swappable modules\n\nThe WenTian server is designed for high-performance computing, AI training, and data-intensive workloads. It is ideal for enterprise data centers, cloud computing environments, and scientific research applications.\n\nLenovo WenTian servers are equipped with advanced management features, including remote monitoring, automated diagnostics, and secure firmware updates. These features ensure high availability, reliability, and ease of maintenance.\n\nFor detailed configuration and setup instructions, refer to the official Lenovo WenTian documentation.\n\n## Deactivate SOL Function (sol deactivate)\n\nThe `sol deactivate` command is used to deactivate the currently active SOL session.\n\n| **Privilege Level** | `administrator` |\n|---------------------|-----------------|\n| **Command Example** | `ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol deactivate` |\n\n**Note**: Executing this will terminate the remote serial session and release the associated resources.\n\nWenTian server supports the following IPMI commands:\n\n| Command | Description |\n|---------|-------------|\n| ipmi chassis power status | Get the power status of the chassis |\n| ipmi chassis power on | Turn on the chassis power |\n| ipmi chassis power off | Turn off the chassis power |\n| ipmi chassis power cycle | Perform a power cycle on the chassis |\n| ipmi mc reset cold | Perform a cold reset on the BMC |\n| ipmi mc reset warm | Perform a warm reset on the BMC |\n| ipmi mc info | Get information about the BMC |\n| ipmi mc watchdog get | Get the watchdog timer status |\n| ipmi mc watchdog set | Set the watchdog timer |\n| ipmi mc watchdog restart | Restart the watchdog timer |\n| ipmi sensor list | List all sensors |\n| ipmi sensor get <sensor_name> | Get the reading of a specific sensor |\n| ipmi sel list | List all SEL entries |\n| ipmi sel get <entry_id> | Get details of a specific SEL entry |\n| ipmi sdr list | List all SDR records |\n| ipmi sdr get <record_id> | Get details of a specific SDR record |\n| ipmi fru list | List all FRU records |\n| ipmi fru get <fru_name> | Get details of a specific FRU record |\n\nThe WenTian server supports the following API commands:\n\n| Command | Description |\n|---------|-------------|\n| api get status | Get the system status |\n| api get power_status | Get the power status |\n| api get temperature | Get the temperature readings |\n| api get fan_speed | Get the fan speed |\n| api get cpu_usage | Get the CPU usage |\n| api get memory_usage | Get the memory usage |\n| api get disk_usage | Get the disk usage |\n| api get gpu_usage | Get the GPU usage |\n| api get network_status | Get the network status |\n| api get system_info | Get system information |\n| api activate <feature> | Activate a specific feature |\n| api deactivate <feature> | Deactivate a specific feature |\n\nThe WenTian server supports the following hardware specifications:\n\n- CPU: Intel Xeon Scalable processors\n- Memory: DDR5 ECC RAM, up to 4TB\n- Storage: Supports NVMe SSD, SAS SSD, SATA SSD, and HDD\n- Expansion: Up to 4 PCIe 5.0 slots\n- GPU: Supports multiple GPU configurations\n- Network: Dual 10GbE ports, optional 25GbE/100GbE\n- BMC: Integrated with IPMI 2.0 and Redfish support\n- Power Supply: Dual redundant PSUs, 1+1 redundancy\n- Cooling: Redundant fans with hot-swappable modules\n\nThe WenTian server is designed for high-performance computing, AI training, and data-intensive workloads. It is ideal for enterprise data centers, cloud computing environments, and scientific research applications.\n\nLenovo WenTian servers are equipped with advanced management features, including remote monitoring, automated diagnostics, and secure firmware updates. These features ensure high availability, reliability, and ease of maintenance.\n\nFor detailed configuration and setup instructions, refer to the official Lenovo WenTian documentation.\n\n## OEM RAW Commands Supported by Lenovo BMC\n\nThe following are OEM (proprietary) RAW commands supported by Lenovo BMC, applicable for advanced management and debugging scenarios:\n\n- `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus raw 0x30 0x01`\n‚Üí Retrieve system status information (e.g., WenTian, ThinkSystem series servers)\n\n- `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus raw 0x30 0x02`\n‚Üí Set system boot mode (e.g., UEFI/BIOS)\n\n- `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus raw 0x30 0x03`\n‚Üí Retrieve hardware health status (supports Xeon processors, Intel platforms)\n\n**Note**: OEM RAW commands must be used in conjunction with specific server models (e.g., Lenovo WenTian servers). Refer to the "Lenovo BMC OEM Command Reference" document for guidance.\n\n## sol activate (Enable SOL function)\n\n| **Command Description** | The `sol activate` command is used to activate the SOL (Serial Over LAN) function. |\n|--------------|--------------------------------------------------------|\n| **Permission Required** | administrator |\n| **Command Example** | `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol activate usesolkeepalive`<br>**Output Example**: `[SOL Session operational. Use ~? for help]` |\n\nWenTian server supports the following IPMI commands:\n\n| Command | Description |\n|---------|-------------|\n| ipmi chassis power status | Get the power status of the chassis |\n| ipmi chassis power on | Turn on the chassis power |\n| ipmi chassis power off | Turn off the chassis power |\n| ipmi chassis power cycle | Perform a power cycle on the chassis |\n| ipmi mc reset cold | Perform a cold reset on the BMC |\n| ipmi mc reset warm | Perform a warm reset on the BMC |\n| ipmi mc info | Get information about the BMC |\n| ipmi mc watchdog get | Get the watchdog timer status |\n| ipmi mc watchdog set | Set the watchdog timer |\n| ipmi mc watchdog restart | Restart the watchdog timer |\n| ipmi sensor list | List all sensors |\n| ipmi sensor get <sensor_name> | Get the reading of a specific sensor |\n| ipmi sel list | List all SEL entries |\n| ipmi sel get <entry_id> | Get details of a specific SEL entry |\n| ipmi sdr list | List all SDR records |\n| ipmi sdr get <record_id> | Get details of a specific SDR record |\n| ipmi fru list | List all FRU records |\n| ipmi fru get <fru_name> | Get details of a specific FRU record |\n\nThe WenTian server supports the following API commands:\n\n| Command | Description |\n|---------|-------------|\n| api get status | Get the system status |\n| api get power_status | Get the power status |\n| api get temperature | Get the temperature readings |\n| api get fan_speed | Get the fan speed |\n| api get cpu_usage | Get the CPU usage |\n| api get memory_usage | Get the memory usage |\n| api get disk_usage | Get the disk usage |\n| api get gpu_usage | Get the GPU usage |\n| api get network_status | Get the network status |\n| api get system_info | Get system information |\n| api activate <feature> | Activate a specific feature |\n| api deactivate <feature> | Deactivate a specific feature |\n\nThe WenTian server supports the following hardware specifications:\n\n- CPU: Intel Xeon Scalable processors\n- Memory: DDR5 ECC RAM, up to 4TB\n- Storage: Supports NVMe SSD, SAS SSD, SATA SSD, and HDD\n- Expansion: Up to 4 PCIe 5.0 slots\n- GPU: Supports multiple GPU configurations\n- Network: Dual 10GbE ports, optional 25GbE/100GbE\n- BMC: Integrated with IPMI 2.0 and Redfish support\n- Power Supply: Dual redundant PSUs, 1+1 redundancy\n- Cooling: Redundant fans with hot-swappable modules\n\nThe WenTian server is designed for high-performance computing, AI training, and data-intensive workloads. It is ideal for enterprise data centers, cloud computing environments, and scientific research applications.\n\nLenovo WenTian servers are equipped with advanced management features, including remote monitoring, automated diagnostics, and secure firmware updates. These features ensure high availability, reliability, and ease of maintenance.\n\nFor detailed configuration and setup instructions, refer to the official Lenovo WenTian documentation.\n\n## sol deactivate (Disable SOL function)\n\n| **Command Description** | The `sol deactivate` command is used to disable the SOL function. |\n|-------------------|------------------------------------------|\n| **Permission Required** | administrator |\n| **Command Example** | `lenovo:~# ipmitool -H [BMC_IP] -U USERID -P PASSW0RD -I lanplus sol deactivate` |\n\nWenTian server supports the following IPMI commands:\n\n| Command | Description |\n|---------|-------------|\n| ipmi chassis power status | Get the power status of the chassis |\n| ipmi chassis power on | Turn on the chassis power |\n| ipmi chassis power off | Turn off the chassis power |\n| ipmi chassis power cycle | Perform a power cycle on the chassis |\n| ipmi mc reset cold | Perform a cold reset on the BMC |\n| ipmi mc reset warm | Perform a warm reset on the BMC |\n| ipmi mc info | Get information about the BMC |\n| ipmi mc watchdog get | Get the watchdog timer status |\n| ipmi mc watchdog set | Set the watchdog timer |\n| ipmi mc watchdog restart | Restart the watchdog timer |\n| ipmi sensor list | List all sensors |\n| ipmi sensor get <sensor_name> | Get the reading of a specific sensor |\n| ipmi sel list | List all SEL entries |\n| ipmi sel get <entry_id> | Get details of a specific SEL entry |\n| ipmi sdr list | List all SDR records |\n| ipmi sdr get <record_id> | Get details of a specific SDR record |\n| ipmi fru list | List all FRU records |\n| ipmi fru get <fru_name> | Get details of a specific FRU record |\n\nThe WenTian server supports the following API commands:\n\n| Command | Description |\n|---------|-------------|\n| api get status | Get the system status |\n| api get power_status | Get the power status |\n| api get temperature | Get the temperature readings |\n| api get fan_speed | Get the fan speed |\n| api get cpu_usage | Get the CPU usage |\n| api get memory_usage | Get the memory usage |\n| api get disk_usage | Get the disk usage |\n| api get gpu_usage | Get the GPU usage |\n| api get network_status | Get the network status |\n| api get system_info | Get system information |\n| api activate <feature> | Activate a specific feature |\n| api deactivate <feature> | Deactivate a specific feature |\n\nThe WenTian server supports the following hardware specifications:\n\n- CPU: Intel Xeon Scalable processors\n- Memory: DDR5 ECC RAM, up to 4TB\n- Storage: Supports NVMe SSD, SAS SSD, SATA SSD, and HDD\n- Expansion: Up to 4 PCIe 5.0 slots\n- GPU: Supports multiple GPU configurations\n- Network: Dual 10GbE ports, optional 25GbE/100GbE\n- BMC: Integrated with IPMI 2.0 and Redfish support\n- Power Supply: Dual redundant PSUs, 1+1 redundancy\n- Cooling: Redundant fans with hot-swappable modules\n\nThe WenTian server is designed for high-performance computing, AI training, and data-intensive workloads. It is ideal for enterprise data centers, cloud computing environments, and scientific research applications.\n\nLenovo WenTian servers are equipped with advanced management features, including remote monitoring, automated diagnostics, and secure firmware updates. These features ensure high availability, reliability, and ease of maintenance.\n\nFor detailed configuration and setup instructions, refer to the official Lenovo WenTian documentation.\n\n## Get SNMP Trap Info\n\n**OEM RAW Command**: `netfn=0x30`, `cmd=0x02`\n\n### Request Data\n\n| Byte Position | Data Field |\n|----------------|------------|\n| 1              | User ID, range: 01h to 05h |\n| 2        | Parameter Type:<br>01h - Enabled Status<br>02h - Severity Level<br>03h - Version<br>04h - Mode<br>05h - Community Name<br>06h - Username<br>07h - User Encryption Status<br>08h - Password<br>09h - Password Encryption Status<br>0Ah - Target IP Address<br>0Bh - Port<br>0Ch - LAN Channel<br>0Dh - Enter ID |\n\n### Response Data\n\n| Parameter | Byte Position | Data Field |\n|-----------|---------------|------------|\n| 01h (Enable Status) | 1 | Completion Code<br>2 | 00h - Disabled<br>01h - Enabled |\n| 02h (Criticality Level) | 1 | Completion Code<br>2 | 01h - Critical<br>02h - Critical + Warning<br>03h - All |\n| 03h (Version) | 1 | Completion Code<br>2 | 01h - v1<br>02h - v2c<br>03h - v3 |\n| 04h (Mode) | 1 | Completion Code<br>2 | Mode value (specific meaning depends on configuration) |\n| 05h (Group Name) | 1 | Completion Code<br>2:17 | Group Name String (ASCII) |\n| 06h (User Name) | 1 | Completion Code<br>2:17 | User Name String (ASCII) |\n| 07h (User Encryption) | 1 | Completion Code<br>2 | 00h - User Encrypted<br>01h - User Not Encrypted |\n| 08h (Password) | 1 | Completion Code<br>2:17 | Password string (ASCII) |\n| 09h (Password Encryption) | 1 | Completion Code<br>2 | 00h - Password encrypted<br>01h - Password not encrypted |\n| 0Ah (Target IP) | 1 | Completion Code<br>2:33 | Target IP address (IPv4 format) |\n| 0Bh (Port) | 1 | Completion Code<br>2:3 | Port Number (16-bit integer) |\n| 0Ch (LAN Channel) | 1 | Completion Code<br>2 | LAN Channel Number (0‚Äì3) |\n| 0Dh (Enter ID) | 1 | Completion Code<br>2:33 | Enter ID String (ASCII) |\n\n### Command Examples\n\n```bash\n```\n# ipmitool -H 10.109.107.160 -U USERID -P PASSW0RD raw 0x30 0x02 0x01 0x01\n```\n\n**Note**:\n- `10.109.107.160` is the BMC IP address and must be replaced with the actual address.  \n- `USERID` and `PASSW0RD` are the administrator account credentials.\n- 0x30 is the NetFn (Network Function code), and 0x02 is the command code.  \n- Parameter 0x01 indicates retrieving the enabled status; other parameters can be replaced as needed.\n\n```markdown\n```\n### Set SNMP Trap Information (Set SNMP Trap Info)\n\n| Command | `netfn=0x30`, `cmd=0x03` |\n|------|--------------------------|\n\n#### Request Data\n\n| Byte | Data Field |\n|------|------------|\n| 1    | User ID (range: 01h‚Äì05h) |\n| 2           | Parameter ID: <br>‚Ä¢ 01h: Enable/Disable<br>‚Ä¢ 02h: Severity Level<br>‚Ä¢ 03h: Version<br>‚Ä¢ 04h: Mode<br>‚Ä¢ 05h: Community<br>‚Ä¢ 06h: Username<br>‚Ä¢ 07h: User Encryption Status<br>‚Ä¢ 08h: Password<br>‚Ä¢ 09h: Password Encryption Status<br>‚Ä¢ 0Ah: Destination IP Address<br>‚Ä¢ 0Bh: Port<br>‚Ä¢ 0Ch: LAN Channel<br>‚Ä¢ 0Dh: Enter ID |\n| 3           | Parameter Value Description: <br>‚Ä¢ **Parameter 01h**: <br>  - 00h: Disable<br>  - 01h: Enable<br>‚Ä¢ **Parameter 02h**: <br>  - 01h: Critical<br>  - 02h: Critical and Warning<br>  - 03h: All<br>‚Ä¢ **Parameter 03h**: <br>  - 01h: SNMPv1<br>  - 02h: SNMPv2c<br>  - 03h: SNMPv3 |\n\n#### Response Data\n\n| Byte | Data Field |\n|------|------------|\n| 1    | Completion Code |\n\n#### Command Example\n\n```bash\n```\n# ipmitool -H 10.109.107.160 -U USERID -P PASSW0RD raw 0x30 0x03 0x01 0x01 0x02 0x03 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01', 'original_config': {'chinese_document': True, 'container_temp_dir': '/opt/***/temp', 'enable_ocr': True, 'extract_images': True, 'extract_tables': True, 'filename': 'test_short.pdf', 'input_dir': '/app/input', 'input_file': '/app/input/test_short.pdf', 'master_run_id': 'manual__2025-10-15T15:49:05.089958+00:00', 'output_target_dir': '/app/output/en', 'output_zh_dir': '/app/output/zh', 'pipeline_version': '4.0_fixed', 'preserve_structure': True, 'preserve_technical_terms': True, 'processing_stages': 4, 'processing_start_time': '2025-10-15T15:49:06.727388', 'quality_level': 'high', 'quality_target': 95.0, 'stage_mode': 'full_with_translation', 'target_language': 'en', 'timestamp': 1760543344, 'translation_required': True, 'validation_enabled': True}, 'translation_metadata': {}, 'qa_start_time': '2025-10-15T15:52:19.075102', 'target_quality': 95.0, 'auto_correction': True, 'original_pdf_path': '/app/input/test_short.pdf', 'document_id': '1760543344_test_short', 'enable_5_level_validation': True, 'enterprise_mode': True, 'level_configs': {'level1_ocr': {'consensus_threshold': 0.85, 'similarity_threshold': 0.8, 'engines': ['paddleocr', 'tesseract']}, 'level2_visual': {'ssim_threshold': 0.95, 'difference_tolerance': 0.1, 'page_comparison_mode': 'structural', 'pandoc_integration': True}, 'level3_ast': {'structural_similarity_threshold': 0.9, 'semantic_similarity_threshold': 0.85, 'model_name': 'sentence-transformers/all-MiniLM-L6-v2'}, 'level4_content': {'min_technical_terms': 5, 'min_code_blocks': 1, 'formatting_score_threshold': 0.8}, 'level5_correction': {'vllm_endpoint': 'http://vllm-server:8000/v1/chat/completions', 'correction_model': 'Qwen/Qwen3-30B-A3B-Instruct-2507', 'max_retries': 5, 'enable_auto_correction': True}}, 'qa_rules': {'min_content_length': 100, 'min_headings': 1, 'max_chinese_chars_ratio': 0.2, 'require_title': True, 'check_table_structure': True, 'validate_markdown_syntax': True, 'technical_terms_check': True, 'preserve_brand_names': True, 'min_quality_score': 80.0, 'excellent_quality_score': 95.0, 'OCR_CONFIDENCE_THRESHOLD': 0.8, 'VISUAL_SIMILARITY_THRESHOLD': 0.95, 'AST_SIMILARITY_THRESHOLD': 0.9, 'SEMANTIC_SIMILARITY_THRESHOLD': 0.85, 'OVERALL_QA_THRESHOLD': 0.85, 'MAX_CORRECTIONS_PER_DOCUMENT': 10, 'AUTO_CORRECTION_CONFIDENCE': 0.7}}
[2025-10-15T15:52:19.098+0000] {taskinstance.py:1138} INFO - Marking task as SUCCESS. dag_id=quality_assurance, task_id=load_translated_document, execution_date=20251015T155217, start_date=20251015T155218, end_date=20251015T155219
[2025-10-15T15:52:19.120+0000] {local_task_job_runner.py:234} INFO - Task exited with return code 0
[2025-10-15T15:52:19.272+0000] {taskinstance.py:3280} INFO - 3 downstream tasks scheduled from follow-on schedule check
